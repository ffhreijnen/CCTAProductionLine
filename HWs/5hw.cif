// Input interface. A hardware sensor is coupled to an input variable below
// (hardware to mapping), and the input variable below is merged with the
// input variable of the controller (mapping to controller).

input bool s_Pstartbutton;    // 0
input bool s_Pstopbutton;     // 1
input bool s_Pautoswitch;     // 2
input bool s_Presetbutton;    // 3

input bool s_Pin4;            // 4
input bool s_Pin5;            // 5
input bool s_Pin6;            // 6
input bool s_Pin7;            // 7

input bool s_atinput;         // 8
input bool s_attest;          // 9
input bool s_atdrill;         // 10
input bool s_atexit;          // 11
input bool s_atspare;         // 12
input bool s_clamp;           // 13
input bool s_test_ok;         // 14
input bool s_drill_up;        // 15
input bool s_drill_down;      // 16
input bool s_turntable;       // 17
input bool s_sortingbusy;     // 18

// Special input indicating that initialization has finished. Once it becomes
// 'true' the controller may use the other sensors. Then also the requested
// output values will be used to set the actual outputs.

alg   bool s_Pinitialized;    // 19

equation   s_Pinitialized = HardwareMapP.initialized;

// Output interface. A variable (e.g. algebraic variable) from the controller
// is merged with an input variable below (controller to mapping). The hardware
// mapping interprets the value provided by the controller as requested output
// value, and sets the actual output value (mapping to hardware, see below).

input bool a_Pstartled;       // 0
input bool a_Presetled;       // 1
input bool a_PledQ1;          // 2
input bool a_PledQ2;          // 3

input bool a_Pout4;           // 4
input bool a_Pout5;           // 5
input bool a_Pout6;           // 6
input bool a_Pout7;           // 7

input bool a_drill;           // 8
input bool a_turntable;       // 9
input bool a_drilldown;       // 10
input bool a_drillup;         // 11
input bool a_clamp;           // 12
input bool a_tester;          // 13
input bool a_eject;           // 14
input bool a_processingready; // 15

// Hardware mapping behavior. Includes the initialization sequence, and
// setting of the hardware outputs based on requested outputs (mapping to
// hardware).

automaton HardwareMapP:
  // Output interface. The discrete variables below are coupled to hardware
  // actuators (mapping to hardware).
  disc bool out_a_Pstartled       = false; // 0
  disc bool out_a_Presetled       = false; // 1
  disc bool out_a_PledQ1          = true;  // 2 (on during initialization)
  disc bool out_a_PledQ2          = true;  // 3 (on during initialization)

  disc bool out_a_Pout4           = false; // 4
  disc bool out_a_Pout5           = false; // 5
  disc bool out_a_Pout6           = false; // 6
  disc bool out_a_Pout7           = false; // 7

  disc bool out_a_drill           = false; // 8
  disc bool out_a_turntable       = false; // 9
  disc bool out_a_drilldown       = false; // 10
  disc bool out_a_drillup         = true;  // 11
  disc bool out_a_clamp           = false; // 12
  disc bool out_a_tester          = false; // 13
  disc bool out_a_eject           = false; // 14
  disc bool out_a_processingready = false; // 15

  // Variables used for the initialization sequence.
  disc int init_err_sen_idx = -1;          // Index of sensor that caused initialization failure, or -1 if no error.
  disc int init_err_led_idx = 0;           // Led index for initialization error indication (alternating leds).
  cont t der 1.0;                          // Timer.

  // Wait a bit for the actuators to do their job, and reach a stable state.
  location init0:
    initial;

    edge when t >= 2.0 goto init1;

  // Rotate to one of the 6 positions. Activate the turn table, wait for the
  // turn table sensor to be cleared, and then wait for the turn table to reach
  // one of the positions.
  location init1:
    edge do out_a_turntable := true goto init2;

  location init2:
    edge when not s_turntable goto init3;

  location init3:
    edge when s_turntable do out_a_turntable := false, t := 0 goto init4;

  // Wait until rotational movement has really stopped, after shutting down motor in init3
  location init4:
    edge when t >= 1 goto init_sensor_check;

  // Check all sensors, to see whether initialization succeeded.
  location init_sensor_check:
    edge when     s_Pstartbutton do init_err_sen_idx :=  0 goto init_error;
    edge when not s_Pstopbutton  do init_err_sen_idx :=  1 goto init_error;
    edge when     s_Pautoswitch  do init_err_sen_idx :=  2 goto init_error;
    edge when     s_Presetbutton do init_err_sen_idx :=  3 goto init_error;

    edge when     s_Pin4         do init_err_sen_idx :=  4 goto init_error;
    edge when     s_Pin5         do init_err_sen_idx :=  5 goto init_error;
    edge when     s_Pin6         do init_err_sen_idx :=  6 goto init_error;
    edge when     s_Pin7         do init_err_sen_idx :=  7 goto init_error;

    edge when     s_atinput      do init_err_sen_idx :=  8 goto init_error;
    edge when     s_attest       do init_err_sen_idx :=  9 goto init_error;
    edge when     s_atdrill      do init_err_sen_idx := 10 goto init_error;
    edge when     s_atexit       do init_err_sen_idx := 11 goto init_error;
    edge when     s_atspare      do init_err_sen_idx := 12 goto init_error;
    edge when     s_clamp        do init_err_sen_idx := 13 goto init_error;
    edge when     s_test_ok      do init_err_sen_idx := 14 goto init_error;
    edge when not s_drill_up     do init_err_sen_idx := 15 goto init_error;
    edge when     s_drill_down   do init_err_sen_idx := 16 goto init_error;
    edge when not s_turntable    do init_err_sen_idx := 17 goto init_error;

    // s_sortingbusy may have any value initially.
    // s_Pinitialized is defined by the hardware mapping.

    edge when not s_Pstartbutton,
                  s_Pstopbutton,
              not s_Pautoswitch,
              not s_Presetbutton,

              not s_Pin4,
              not s_Pin5,
              not s_Pin6,
              not s_Pin7,

              not s_atinput,
              not s_attest,
              not s_atdrill,
              not s_atexit,
              not s_atspare,
              not s_clamp,
              not s_test_ok,
                  s_drill_up,
              not s_drill_down,
                  s_turntable

         goto init_ok;

  // Initialization failed. Using alternating leds to indicate this to the user.
  location init_error:
    edge when t >= 0.5, init_err_led_idx = 0 do t := 0.0, init_err_led_idx := 1, out_a_PledQ1 := true,  out_a_PledQ2 := false;
    edge when t >= 0.5, init_err_led_idx = 1 do t := 0.0, init_err_led_idx := 0, out_a_PledQ1 := false, out_a_PledQ2 := true;

  // Initialization succeeded. Leds are on during initialization. Turn them back off.
  location init_ok:
    edge do out_a_PledQ1 := false, out_a_PledQ2 := false goto initialized;

  // Initialized. Changes to requested output values are copied to the actual outputs (mapping to hardware).
  location initialized:
    edge when out_a_Pstartled       != a_Pstartled       do out_a_Pstartled       := a_Pstartled;
    edge when out_a_Presetled       != a_Presetled       do out_a_Presetled       := a_Presetled;
    edge when out_a_PledQ1          != a_PledQ1          do out_a_PledQ1          := a_PledQ1;
    edge when out_a_PledQ2          != a_PledQ2          do out_a_PledQ2          := a_PledQ2;

    edge when out_a_Pout4           != a_Pout4           do out_a_Pout4           := a_Pout4;
    edge when out_a_Pout5           != a_Pout5           do out_a_Pout5           := a_Pout5;
    edge when out_a_Pout6           != a_Pout6           do out_a_Pout6           := a_Pout6;
    edge when out_a_Pout7           != a_Pout7           do out_a_Pout7           := a_Pout7;

    edge when out_a_drill           != a_drill           do out_a_drill           := a_drill;
    edge when out_a_turntable       != a_turntable       do out_a_turntable       := a_turntable;
    edge when out_a_drilldown       != a_drilldown       do out_a_drilldown       := a_drilldown;
    edge when out_a_drillup         != a_drillup         do out_a_drillup         := a_drillup;
    edge when out_a_clamp           != a_clamp           do out_a_clamp           := a_clamp;
    edge when out_a_tester          != a_tester          do out_a_tester          := a_tester;
    edge when out_a_eject           != a_eject           do out_a_eject           := a_eject;
    edge when out_a_processingready != a_processingready do out_a_processingready := a_processingready;
end
