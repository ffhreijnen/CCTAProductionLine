// Input interface. A hardware sensor is coupled to an input variable below
// (hardware to mapping), and the input variable below is merged with the
// input variable of the controller (mapping to controller).

input bool s_Sstartbutton;    // 0
input bool s_Sstopbutton;     // 1
input bool s_Sautoswitch;     // 2
input bool s_Sresetbutton;    // 3

input bool s_Sin4;            // 4
input bool s_Sin5;            // 5
input bool s_Sin6;            // 6
input bool s_Sin7;            // 7

input bool s_product;         // 8
input bool s_inductive;       // 9
input bool s_optical;         // 10
input bool s_slidefull;       // 11
input bool s_gate1_opened;    // 12
input bool s_gate1_closed;    // 13
input bool s_gate2_opened;    // 14
input bool s_gate2_closed;    // 15

// Special input indicating that initialization has finished. Once it becomes
// 'true' the controller may use the other sensors. Then also the requested
// output values will be used to set the actual outputs.

alg   bool s_Sinitialized;    // 16

equation   s_Sinitialized = HardwareMapS.initialized;

// Output interface. A variable (e.g. algebraic variable) from the controller
// is merged with an input variable below (controller to mapping). The hardware
// mapping interprets the value provided by the controller as requested output
// value, and sets the actual output value (mapping to hardware, see below).

input bool a_Sstartled;       // 0
input bool a_Sresetled;       // 1
input bool a_SledQ1;          // 2
input bool a_SledQ2;          // 3

input bool a_Sout4;           // 4
input bool a_Sout5;           // 5
input bool a_Sout6;           // 6
input bool a_Sout7;           // 7

input bool a_conveyer;        // 8
input bool a_gate1;           // 9
input bool a_gate2;           // 10
input bool a_stopperretract;  // 11
input bool a_sortingready;    // 12

// Hardware mapping behavior. Includes the initialization sequence, and
// setting of the hardware outputs based on requested outputs (mapping to
// hardware).

automaton HardwareMapS:
  // Output interface. The discrete variables below are coupled to hardware
  // actuators (mapping to hardware).
  disc bool out_a_Sstartled      = false; // 0
  disc bool out_a_Sresetled      = false; // 1
  disc bool out_a_SledQ1         = true;  // 2 (on during initialization)
  disc bool out_a_SledQ2         = true;  // 3 (on during initialization)

  disc bool out_a_Sout4          = false; // 4
  disc bool out_a_Sout5          = false; // 5
  disc bool out_a_Sout6          = false; // 6
  disc bool out_a_Sout7          = false; // 7

  disc bool out_a_conveyer       = false; // 8
  disc bool out_a_gate1          = false; // 9
  disc bool out_a_gate2          = false; // 10
  disc bool out_a_stopperretract = false; // 11
  disc bool out_a_sortingready   = false; // 12

  // Variables used for the initialization sequence.
  disc int init_err_sen_idx = -1;          // Index of sensor that caused initialization failure, or -1 if no error.
  disc int init_err_led_idx = 0;           // Led index for initialization error indication (alternating leds).
  cont t der 1.0;                          // Timer.

  // Wait a bit for the actuators to do their job, and reach a stable state.
  location init0:
    initial;

    edge when t >= 2.0 goto init1;

  // Clear station by retracting stopper, moving the conveyer, and waiting a
  // bit until the station is cleared.
  location init1:
    edge do out_a_stopperretract := true, out_a_conveyer := true, t := 0 goto init2;

  location init2:
    edge when t >= 5 do out_a_stopperretract := false, out_a_conveyer := false goto init_sensor_check;

  // Check all sensors, to see whether initialization succeeded.
  location init_sensor_check:
    edge when     s_Sstartbutton do init_err_sen_idx :=  0 goto init_error;
    edge when not s_Sstopbutton  do init_err_sen_idx :=  1 goto init_error;
    edge when     s_Sautoswitch  do init_err_sen_idx :=  2 goto init_error;
    edge when     s_Sresetbutton do init_err_sen_idx :=  3 goto init_error;

    edge when     s_Sin4         do init_err_sen_idx :=  4 goto init_error;
    edge when     s_Sin5         do init_err_sen_idx :=  5 goto init_error;
    edge when     s_Sin6         do init_err_sen_idx :=  6 goto init_error;
    edge when     s_Sin7         do init_err_sen_idx :=  7 goto init_error;

    edge when     s_product      do init_err_sen_idx :=  8 goto init_error;
    edge when     s_inductive    do init_err_sen_idx :=  9 goto init_error;
    edge when     s_optical      do init_err_sen_idx := 10 goto init_error;
    edge when     s_slidefull    do init_err_sen_idx := 11 goto init_error;
    edge when not s_gate1_opened do init_err_sen_idx := 12 goto init_error;
    edge when     s_gate1_closed do init_err_sen_idx := 13 goto init_error;
    edge when not s_gate2_opened do init_err_sen_idx := 14 goto init_error;
    edge when     s_gate2_closed do init_err_sen_idx := 15 goto init_error;

    // s_Sinitialized is defined by the hardware mapping.

    edge when not s_Sstartbutton,
                  s_Sstopbutton,
              not s_Sautoswitch,
              not s_Sresetbutton,

              not s_Sin4,
              not s_Sin5,
              not s_Sin6,
              not s_Sin7,

              not s_product,
              not s_inductive,
              not s_optical,
              not s_slidefull,
                  s_gate1_opened,
              not s_gate1_closed,
                  s_gate2_opened,
              not s_gate2_closed

         goto init_ok;

  // Initialization failed. Using alternating leds to indicate this to the user.
  location init_error:
    edge when t >= 0.5, init_err_led_idx = 0 do t := 0.0, init_err_led_idx := 1, out_a_SledQ1 := true,  out_a_SledQ2 := false;
    edge when t >= 0.5, init_err_led_idx = 1 do t := 0.0, init_err_led_idx := 0, out_a_SledQ1 := false, out_a_SledQ2 := true;

  // Initialization succeeded. Leds are on during initialization. Turn them back off.
  location init_ok:
    edge do out_a_SledQ1 := false, out_a_SledQ2 := false goto initialized;

  // Initialized. Changes to requested output values are copied to the actual outputs (mapping to hardware).
  location initialized:
    edge when out_a_Sstartled      != a_Sstartled      do out_a_Sstartled      := a_Sstartled;
    edge when out_a_Sresetled      != a_Sresetled      do out_a_Sresetled      := a_Sresetled;
    edge when out_a_SledQ1         != a_SledQ1         do out_a_SledQ1         := a_SledQ1;
    edge when out_a_SledQ2         != a_SledQ2         do out_a_SledQ2         := a_SledQ2;

    edge when out_a_Sout4          != a_Sout4          do out_a_Sout4          := a_Sout4;
    edge when out_a_Sout5          != a_Sout5          do out_a_Sout5          := a_Sout5;
    edge when out_a_Sout6          != a_Sout6          do out_a_Sout6          := a_Sout6;
    edge when out_a_Sout7          != a_Sout7          do out_a_Sout7          := a_Sout7;

    edge when out_a_conveyer       != a_conveyer       do out_a_conveyer       := a_conveyer;
    edge when out_a_gate1          != a_gate1          do out_a_gate1          := a_gate1;
    edge when out_a_gate2          != a_gate2          do out_a_gate2          := a_gate2;
    edge when out_a_stopperretract != a_stopperretract do out_a_stopperretract := a_stopperretract;
    edge when out_a_sortingready   != a_sortingready   do out_a_sortingready   := a_sortingready;
end
