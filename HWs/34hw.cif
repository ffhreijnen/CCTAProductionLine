// TESTING:

// Input interface. A hardware sensor is coupled to an input variable below
// (hardware to mapping), and the input variable below is merged with the
// input variable of the controller (mapping to controller).

input bool s_Tstartbutton;     // 0
input bool s_Tstopbutton;      // 1
input bool s_Tautoswitch;      // 2
input bool s_Tresetbutton;     // 3

input bool s_Tin4;             // 4
input bool s_Tin5;             // 5
input bool s_Tin6;             // 6
input bool s_Tin7;             // 7

input bool s_elevator_up;      // 8
input bool s_elevator_down;    // 9
input bool s_pusher;           // 10
input bool s_opticalT;          // 11
input bool s_capacitive;       // 12
input bool s_reflective;       // 13
input bool s_productheight;    // 14
input bool s_bufferingbusy;    // 15

// Special input indicating that initialization has finished. Once it becomes
// 'true' the controller may use the other sensors. Then also the requested
// output values will be used to set the actual outputs.

alg   bool s_Tinitialized;     // 16

equation   s_Tinitialized = HardwareMapTB.initialized;

// BUFFERING:

// Input interface. A hardware sensor is coupled to an input variable below
// (hardware to mapping), and the input variable below is merged with the
// input variable of the controller (mapping to controller).

input bool s_Bstartbutton;     // 17
input bool s_Bstopbutton;      // 18
input bool s_Bautoswitch;      // 19
input bool s_Bresetbutton;     // 20

input bool s_Bin4;             // 21
input bool s_Bin5;             // 22
input bool s_Bin6;             // 23
input bool s_Bin7;             // 24

input bool s_atin;             // 25
input bool s_atseparator;      // 26
input bool s_atend;            // 27
input bool s_separator_opened; // 28
input bool s_separator_closed; // 29
input bool s_processingbusy;   // 30

// Special input indicating that initialization has finished. Once it becomes
// 'true' the controller may use the other sensors. Then also the requested
// output values will be used to set the actual outputs.

alg   bool s_Binitialized;     // 31

equation   s_Binitialized = HardwareMapTB.initialized;

// TESTING:

// Output interface. A variable (e.g. algebraic variable) from the controller
// is merged with an input variable below (controller to mapping). The hardware
// mapping interprets the value provided by the controller as requested output
// value, and sets the actual output value (mapping to hardware, see below).

input bool a_Tstartled;        // 0
input bool a_Tresetled;        // 1
input bool a_TledQ1;           // 2
input bool a_TledQ2;           // 3

input bool a_Tout4;            // 4
input bool a_Tout5;            // 5
input bool a_Tout6;            // 6
input bool a_Tout7;            // 7

input bool a_elevator_up;      // 8
input bool a_elevator_down;    // 9
input bool a_pusher;           // 10
input bool a_airslide;         // 11
input bool a_testingready;     // 12

// BUFFERING:

// Output interface. A variable (e.g. algebraic variable) from the controller
// is merged with an input variable below (controller to mapping). The hardware
// mapping interprets the value provided by the controller as requested output
// value, and sets the actual output value (mapping to hardware, see below).

input bool a_Bstartled;        // 13
input bool a_Bresetled;        // 14
input bool a_BledQ1;           // 15
input bool a_BledQ2;           // 16

input bool a_Bout4;            // 17
input bool a_Bout5;            // 18
input bool a_Bout6;            // 19
input bool a_Bout7;            // 20

input bool a_separator;        // 21
input bool a_conveyerB;         // 22
input bool a_bufferingready;   // 23

// Hardware mapping behavior. Includes the initialization sequence, and
// setting of the hardware outputs based on requested outputs (mapping to
// hardware).

automaton HardwareMapTB:
  // TESTING:

  // Output interface. The discrete variables below are coupled to hardware
  // actuators (mapping to hardware).
  disc bool out_a_Tstartled      = false; // 0
  disc bool out_a_Tresetled      = false; // 1
  disc bool out_a_TledQ1         = true;  // 2 (on during initialization)
  disc bool out_a_TledQ2         = true;  // 3 (on during initialization)

  disc bool out_a_Tout4          = false; // 4
  disc bool out_a_Tout5          = false; // 5
  disc bool out_a_Tout6          = false; // 6
  disc bool out_a_Tout7          = false; // 7

  disc bool out_a_elevator_up    = false; // 8
  disc bool out_a_elevator_down  = true;  // 9
  disc bool out_a_pusher         = false; // 10
  disc bool out_a_airslide       = false; // 11
  disc bool out_a_testingready   = false; // 12

  // BUFFERING:

  // Output interface. The discrete variables below are coupled to hardware
  // actuators (mapping to hardware).
  disc bool out_a_Bstartled      = false; // 13
  disc bool out_a_Bresetled      = false; // 14
  disc bool out_a_BledQ1         = true;  // 15 (on during initialization)
  disc bool out_a_BledQ2         = true;  // 16 (on during initialization)

  disc bool out_a_Bout4          = false; // 17
  disc bool out_a_Bout5          = false; // 18
  disc bool out_a_Bout6          = false; // 19
  disc bool out_a_Bout7          = false; // 20

  disc bool out_a_separator      = false; // 21
  disc bool out_a_conveyerB      = false; // 22
  disc bool out_a_bufferingready = false; // 23

  // TESTING + BUFFERING:

  // Variables used for the initialization sequence.
  disc int init_err_sen_idx = -1;          // Index of sensor that caused initialization failure, or -1 if no error.
  disc int init_err_led_idx = 0;           // Led index for initialization error indication (alternating leds).
  cont t der 1.0;                          // Timer.

  // Wait a bit for the actuators to do their job, and reach a stable state.
  location init0:
    initial;

    edge when t >= 2.0 goto init1;

  // Enable air slide and conveyer, wait for products to clear both stations.
  location init1:
    edge do out_a_airslide := true, out_a_conveyerB := true, t := 0 goto init2;

  location init2:
    edge when t >= 5 do out_a_airslide := false, out_a_conveyerB := false goto init_sensor_check;

  // Check all sensors, to see whether initialization succeeded.
  location init_sensor_check:
    // TESTING:
    edge when     s_Tstartbutton     do init_err_sen_idx :=  0 goto init_error;
    edge when not s_Tstopbutton      do init_err_sen_idx :=  1 goto init_error;
    edge when     s_Tautoswitch      do init_err_sen_idx :=  2 goto init_error;
    edge when     s_Tresetbutton     do init_err_sen_idx :=  3 goto init_error;

    edge when     s_Tin4             do init_err_sen_idx :=  4 goto init_error;
    edge when     s_Tin5             do init_err_sen_idx :=  5 goto init_error;
    edge when     s_Tin6             do init_err_sen_idx :=  6 goto init_error;
    edge when     s_Tin7             do init_err_sen_idx :=  7 goto init_error;

    edge when     s_elevator_up      do init_err_sen_idx :=  8 goto init_error;
    edge when not s_elevator_down    do init_err_sen_idx :=  9 goto init_error;
    edge when     s_pusher           do init_err_sen_idx := 10 goto init_error;
    edge when     s_opticalT         do init_err_sen_idx := 11 goto init_error;
    edge when     s_capacitive       do init_err_sen_idx := 12 goto init_error;
    edge when     s_reflective       do init_err_sen_idx := 13 goto init_error;
    edge when     s_productheight    do init_err_sen_idx := 14 goto init_error;

    // s_bufferingbusy may have any value initially.
    // s_Tinitialized is defined by the hardware mapping.

    // BUFFERING:
    edge when     s_Bstartbutton     do init_err_sen_idx := 17 goto init_error;
    edge when not s_Bstopbutton      do init_err_sen_idx := 18 goto init_error;
    edge when     s_Bautoswitch      do init_err_sen_idx := 19 goto init_error;
    edge when     s_Bresetbutton     do init_err_sen_idx := 20 goto init_error;

    edge when     s_Bin4             do init_err_sen_idx := 21 goto init_error;
    edge when     s_Bin5             do init_err_sen_idx := 22 goto init_error;
    edge when     s_Bin6             do init_err_sen_idx := 23 goto init_error;
    edge when     s_Bin7             do init_err_sen_idx := 24 goto init_error;

    edge when     s_atin             do init_err_sen_idx := 25 goto init_error;
    edge when     s_atseparator      do init_err_sen_idx := 26 goto init_error;
    edge when     s_atend            do init_err_sen_idx := 27 goto init_error;
    edge when     s_separator_opened do init_err_sen_idx := 28 goto init_error;
    edge when not s_separator_closed do init_err_sen_idx := 29 goto init_error;

    // s_processingbusy may have any value initially.
    // s_Binitialized is defined by the hardware mapping.

    edge when // TESTING:
              not s_Tstartbutton,
                  s_Tstopbutton,
              not s_Tautoswitch,
              not s_Tresetbutton,

              not s_Tin4,
              not s_Tin5,
              not s_Tin6,
              not s_Tin7,

              not s_elevator_up,
                  s_elevator_down,
              not s_pusher,
              not s_opticalT,
              not s_capacitive,
              not s_reflective,
              not s_productheight,

              // BUFFERING:
              not s_Bstartbutton,
                  s_Bstopbutton,
              not s_Bautoswitch,
              not s_Bresetbutton,

              not s_Bin4,
              not s_Bin5,
              not s_Bin6,
              not s_Bin7,

              not s_atin,
              not s_atseparator,
              not s_atend,
              not s_separator_opened,
                  s_separator_closed

         goto init_ok;

  // Initialization failed. Using alternating leds to indicate this to the user.
  location init_error:
    edge when t >= 0.5, init_err_led_idx = 0 do t := 0.0, init_err_led_idx := 1, out_a_TledQ1 := true,  out_a_TledQ2 := false, out_a_BledQ1 := true,  out_a_BledQ2 := false;
    edge when t >= 0.5, init_err_led_idx = 1 do t := 0.0, init_err_led_idx := 0, out_a_TledQ1 := false, out_a_TledQ2 := true,  out_a_BledQ1 := false, out_a_BledQ2 := true;

  // Initialization succeeded. Leds are on during initialization. Turn them back off.
  location init_ok:
    edge do out_a_TledQ1 := false,  out_a_TledQ2 := false, out_a_BledQ1 := false,  out_a_BledQ2 := false goto initialized;

  // Initialized. Changes to requested output values are copied to the actual outputs (mapping to hardware).
  location initialized:
    // TESTING:
    edge when out_a_Tstartled      != a_Tstartled      do out_a_Tstartled      := a_Tstartled;
    edge when out_a_Tresetled      != a_Tresetled      do out_a_Tresetled      := a_Tresetled;
    edge when out_a_TledQ1         != a_TledQ1         do out_a_TledQ1         := a_TledQ1;
    edge when out_a_TledQ2         != a_TledQ2         do out_a_TledQ2         := a_TledQ2;

    edge when out_a_Tout4          != a_Tout4          do out_a_Tout4          := a_Tout4;
    edge when out_a_Tout5          != a_Tout5          do out_a_Tout5          := a_Tout5;
    edge when out_a_Tout6          != a_Tout6          do out_a_Tout6          := a_Tout6;
    edge when out_a_Tout7          != a_Tout7          do out_a_Tout7          := a_Tout7;

    edge when out_a_elevator_up    != a_elevator_up    do out_a_elevator_up    := a_elevator_up;
    edge when out_a_elevator_down  != a_elevator_down  do out_a_elevator_down  := a_elevator_down;
    edge when out_a_pusher         != a_pusher         do out_a_pusher         := a_pusher;
    edge when out_a_airslide       != a_airslide       do out_a_airslide       := a_airslide;
    edge when out_a_testingready   != a_testingready   do out_a_testingready   := a_testingready;

    // BUFFERING:
    edge when out_a_Bstartled      != a_Bstartled      do out_a_Bstartled      := a_Bstartled;
    edge when out_a_Bresetled      != a_Bresetled      do out_a_Bresetled      := a_Bresetled;
    edge when out_a_BledQ1         != a_BledQ1         do out_a_BledQ1         := a_BledQ1;
    edge when out_a_BledQ2         != a_BledQ2         do out_a_BledQ2         := a_BledQ2;

    edge when out_a_Bout4          != a_Bout4          do out_a_Bout4          := a_Bout4;
    edge when out_a_Bout5          != a_Bout5          do out_a_Bout5          := a_Bout5;
    edge when out_a_Bout6          != a_Bout6          do out_a_Bout6          := a_Bout6;
    edge when out_a_Bout7          != a_Bout7          do out_a_Bout7          := a_Bout7;

    edge when out_a_separator      != a_separator      do out_a_separator      := a_separator;
    edge when out_a_conveyerB      != a_conveyerB      do out_a_conveyerB      := a_conveyerB;
    edge when out_a_bufferingready != a_bufferingready do out_a_bufferingready := a_bufferingready;
end
