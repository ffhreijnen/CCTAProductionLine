import "../generated_files/5_Supervisor.cif";
// INPUTS

// TESTING:
input bool s_Tstartbutton;     // 0
input bool s_Tstopbutton;      // 1
input bool s_Tautoswitch;      // 2
input bool s_Tresetbutton;     // 3

input bool s_Tin4;             // 4
input bool s_Tin5;             // 5
input bool s_Tin6;             // 6
input bool s_Tin7;             // 7

input bool s_elevator_up;      // 8
input bool s_elevator_down;    // 9
input bool s_pusher;           // 10
input bool s_opticalT;          // 11
input bool s_capacitive;       // 12
input bool s_reflective;       // 13
input bool s_productheight;    // 14
input bool s_bufferingbusy;    // 15

input bool s_Tinitialized;     // 16

automaton BoolToEventsTB:
    location: initial;

    //Distributing station
    edge S_elevator_up.u_on    when     s_elevator_up;
    edge S_elevator_up.u_off   when not s_elevator_up;
    edge S_elevator_down.u_on  when     s_elevator_down;
    edge S_elevator_down.u_off when not s_elevator_down;
    edge S_pusher.u_on         when     s_pusher;
    edge S_pusher.u_off        when not s_pusher;
    edge S_opticalT.u_on       when     s_opticalT;
    edge S_opticalT.u_off      when not s_opticalT;
    edge S_capacitive.u_on     when     s_capacitive;
    edge S_capacitive.u_off    when not s_capacitive;
    edge S_reflective.u_on     when     s_reflective;
    edge S_reflective.u_off    when not s_reflective;
    edge S_productheight.u_on  when     s_productheight;
    edge S_productheight.u_off when not s_productheight;
    edge S_bufferingbusy.u_on  when     s_bufferingbusy;
    edge S_bufferingbusy.u_off when not s_bufferingbusy;
    edge S_Tinitialized.u_on   when     s_Tinitialized;
    edge S_Tinitialized.u_off  when not s_Tinitialized;

    //Buffering station
    edge S_atin.u_on              when     s_atin;
    edge S_atin.u_off             when not s_atin;
    edge S_atseparator.u_on       when     s_atseparator;
    edge S_atseparator.u_off      when not s_atseparator;
    edge S_atend.u_on             when     s_atend;
    edge S_atend.u_off            when not s_atend;
    edge S_separator_opened.u_on  when     s_separator_opened;
    edge S_separator_opened.u_off when not s_separator_opened;
    edge S_separator_closed.u_on  when     s_separator_closed;
    edge S_separator_closed.u_off when not s_separator_closed;
    edge S_processingbusy.u_on    when     s_processingbusy;
    edge S_processingbusy.u_off   when not s_processingbusy;
    edge S_Binitialized.u_on      when     s_Binitialized;
    edge S_Binitialized.u_off     when not s_Binitialized;
end

// OUTPUTS

plant TTimer1:
    cont t = 0.0 der if Running: 1.0 else 0.0 end;
    location Off:
        initial; marked;
        edge TTimer.c_on goto Running;
    location Running:
        edge TTimer.u_timeout when t > 0.5 goto Timeout;
        edge TTimer.c_reset do t := 0.0 goto Off;
    location Timeout:
        edge TTimer.c_reset do t := 0.0 goto Off;
end

// TESTING:
alg bool a_Tstartled      = false; // 0
alg bool a_Tresetled      = false; // 1
alg bool a_TledQ1         = false; // 2
alg bool a_TledQ2         = false; // 3

alg bool a_Tout4          = false; // 4
alg bool a_Tout5          = false; // 5
alg bool a_Tout6          = false; // 6
alg bool a_Tout7          = false; // 7

alg bool a_elevator_up    = sup.A_elevator_up.On  ; // 8
alg bool a_elevator_down  = sup.A_elevator_down.On; // 9
alg bool a_pusher         = sup.A_pusher.On       ; // 10
alg bool a_airslide       = sup.A_airslide.On     ; // 11
alg bool a_testingready   = sup.A_testingready.On ; // 12

// INPUTS

// BUFFERING:
input bool s_Bstartbutton;     // 17
input bool s_Bstopbutton;      // 18
input bool s_Bautoswitch;      // 19
input bool s_Bresetbutton;     // 20

input bool s_Bin4;             // 21
input bool s_Bin5;             // 22
input bool s_Bin6;             // 23
input bool s_Bin7;             // 24

input bool s_atin;             // 25
input bool s_atseparator;      // 26
input bool s_atend;            // 27
input bool s_separator_opened; // 28
input bool s_separator_closed; // 29
input bool s_processingbusy;   // 30

input bool s_Binitialized;     // 31


// OUTPUTS

// BUFFERING:
alg bool a_Bstartled      = false; // 13
alg bool a_Bresetled      = false; // 14
alg bool a_BledQ1         = false; // 15
alg bool a_BledQ2         = false; // 16

alg bool a_Bout4          = false; // 17
alg bool a_Bout5          = false; // 18
alg bool a_Bout6          = false; // 19
alg bool a_Bout7          = false; // 20

alg bool a_separator      = sup.A_separator.On      ; // 21
alg bool a_conveyerB      = sup.A_conveyerB.On       ; // 22
alg bool a_bufferingready = sup.A_bufferingready.On ; // 23

plant BTimer1:
    cont t = 0.0 der if Running: 1.0 else 0.0 end;
    location Off:
        initial; marked;
        edge BTimer.c_on goto Running;
    location Running:
        edge BTimer.u_timeout when t > 0.5 goto Timeout;
        edge BTimer.c_reset do t := 0.0 goto Off;
    location Timeout:
        edge BTimer.c_reset do t := 0.0 goto Off;
end
