<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eindhoven University of Technology (TU/e)" creationDateTime="1970-01-01T01:00:00" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="Untitled1">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="STATE">
        <baseType>
          <struct>
            <variable name="curTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_BoolToEventsDH">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_BoolToEventsP">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_BoolToEventsS">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_BoolToEventsTB">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_BTimer1_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_BTimer1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Dstartled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Dresetled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_DledQ1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_DledQ2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Dout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Dout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Dout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Dout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_pusher1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_pusher2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_pusher3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Hstartled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Hresetled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_HledQ1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_HledQ2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Hout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Hout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Hout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_Hout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_x2distributing">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_x2testing">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_zdown">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_gripperclose">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_transfer2pickpos">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_transfer2droppos">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_vacuum">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_ejectpulse">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_out_a_handlingready">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_init_err_sen_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH_init_err_led_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_HardwareMapDH_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapDH">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_Pstartled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_Presetled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_PledQ1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_PledQ2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_Pout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_Pout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_Pout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_Pout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_drill">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_turntable">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_drilldown">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_drillup">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_clamp">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_tester">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_eject">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_out_a_processingready">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_init_err_sen_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP_init_err_led_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_HardwareMapP_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapP">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_Sstartled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_Sresetled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_SledQ1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_SledQ2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_Sout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_Sout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_Sout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_Sout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_conveyer">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_gate1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_gate2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_stopperretract">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_out_a_sortingready">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_init_err_sen_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS_init_err_led_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_HardwareMapS_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapS">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Tstartled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Tresetled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_TledQ1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_TledQ2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Tout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Tout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Tout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Tout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_elevator_up">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_elevator_down">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_pusher">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_airslide">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_testingready">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Bstartled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Bresetled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_BledQ1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_BledQ2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Bout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Bout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Bout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_Bout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_separator">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_conveyerB">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_out_a_bufferingready">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_init_err_sen_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB_init_err_led_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_HardwareMapTB_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMapTB">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_STimer1_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_STimer1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_airslide">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_bufferingready">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_clamp">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_conveyer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_conveyerB">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_drill">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_drilldown">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_drillup">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_eject">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_ejectpulse">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_elevator_down">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_elevator_up">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_gate1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_gate2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_gripperclose">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_handlingready">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_processingready">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_pusher">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_pusher1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_pusher2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_pusher3">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_separator">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_sortingready">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_stopperretract">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_tester">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_testingready">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_transfer2droppos">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_transfer2pickpos">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_turntable">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_vacuum">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_x2distributing">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_x2testing">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_A_zdown">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_BDynamics">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_BTimer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_ClampDrill">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_DDynamics1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_DDynamics2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_DDynamics3">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_HDynamics1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_HDynamics2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_HDynamics3">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_PDynamics">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_PusherLift">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_atdrill">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_atend">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_atexit">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_atin">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_atinput">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_atseparator">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_atspare">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_attest">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_Binitialized">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_bufferingbusy">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_capacitive">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_clamp">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_Dinitialized">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_drill_down">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_drill_up">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_elevator_down">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_elevator_up">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_gate1_closed">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_gate1_opened">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_gate2_closed">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_gate2_opened">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_gripper">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_handlingbusy">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_Hinitialized">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_inductive">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_optical">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_opticalT">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_Pinitialized">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_processingbusy">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_product">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_product1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_product2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_product3">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_product4">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_productheight">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_pusher">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_pusher1_in">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_pusher1_out">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_pusher2_in">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_pusher2_out">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_pusher3_in">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_pusher3_out">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_reflective">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_separator_closed">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_separator_opened">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_Sinitialized">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_slidefull">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_sortingbusy">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_stack1_filled">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_stack2_filled">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_stack3_filled">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_test_ok">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_testingbusy">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_Tinitialized">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_transfer_atdrop">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_transfer_athalfway">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_transfer_atpickup">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_turntable">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_vacuum">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_xpos_at1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_xpos_at2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_xpos_at3">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_xpos_atdrop">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_zpos_atdown">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_S_zpos_atup">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_SDynamics1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_SDynamics2">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_STimer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_sup">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_TDynamics">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_Tester">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_Timer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup_TTimer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_Timer1_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_Timer1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_TTimer1_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_TTimer1">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="enum_E">
        <baseType>
          <enum>
            <values>
              <value name="elit_eight"/>
              <value name="elit_five"/>
              <value name="elit_Four"/>
              <value name="elit_four2"/>
              <value name="elit_init0"/>
              <value name="elit_init1"/>
              <value name="elit_init2"/>
              <value name="elit_init3"/>
              <value name="elit_init4"/>
              <value name="elit_init5"/>
              <value name="elit_init6"/>
              <value name="elit_init7"/>
              <value name="elit_init8"/>
              <value name="elit_init9"/>
              <value name="elit_init_error"/>
              <value name="elit_init_ok"/>
              <value name="elit_init_sensor_check"/>
              <value name="elit_initialized"/>
              <value name="elit_nine"/>
              <value name="elit_Off"/>
              <value name="elit_On"/>
              <value name="elit_One"/>
              <value name="elit_one2"/>
              <value name="elit_Running"/>
              <value name="elit_seven"/>
              <value name="elit_six"/>
              <value name="elit_Three"/>
              <value name="elit_three2"/>
              <value name="elit_Timeout"/>
              <value name="elit_Two"/>
              <value name="elit_two2"/>
              <value name="elit_X"/>
            </values>
          </enum>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="derivcvar_M_BTimer1_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_BTimer1_t := ifExprFunc1(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="ifExprFunc1" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ((state.dvar_M_BTimer1) = (elit_Running)) THEN
    ifExprFunc1 := 1.0;
ELSE
    ifExprFunc1 := 0.0;
END_IF;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="derivcvar_M_HardwareMapDH_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_HardwareMapDH_t := 1.0;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="derivcvar_M_HardwareMapP_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_HardwareMapP_t := 1.0;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="derivcvar_M_HardwareMapS_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_HardwareMapS_t := 1.0;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="derivcvar_M_HardwareMapTB_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_HardwareMapTB_t := 1.0;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="derivcvar_M_STimer1_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_STimer1_t := ifExprFunc2(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="ifExprFunc2" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ((state.dvar_M_STimer1) = (elit_Running)) THEN
    ifExprFunc2 := 1.0;
ELSE
    ifExprFunc2 := 0.0;
END_IF;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="derivcvar_M_Timer1_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_Timer1_t := ifExprFunc3(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="ifExprFunc3" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ((state.dvar_M_Timer1) = (elit_Running)) THEN
    ifExprFunc3 := 1.0;
ELSE
    ifExprFunc3 := 0.0;
END_IF;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="derivcvar_M_TTimer1_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_TTimer1_t := ifExprFunc4(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="ifExprFunc4" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ((state.dvar_M_TTimer1) = (elit_Running)) THEN
    ifExprFunc4 := 1.0;
ELSE
    ifExprFunc4 := 0.0;
END_IF;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="MAIN" pouType="program">
        <interface>
          <outputVars>
            <variable name="timerValue0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="timerValue1">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="cnt">
              <type>
                <LINT/>
              </type>
            </variable>
            <variable name="first">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="curTimerValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="state0">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
            <variable name="curTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="loopsKilled">
              <type>
                <LINT/>
              </type>
            </variable>
          </localVars>
          <tempVars>
            <variable name="lastTimerValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="curDeltaTime">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="curDeltaSecs">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="state1">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
            <variable name="progress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="loopCount">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="b1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b4">
              <type>
                <BOOL/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
// Handle 'time' and cycle time.
cnt := cnt + 1;

timer0(IN := curTimer = 0, PT := T#1D);
timer1(IN := curTimer = 1, PT := T#1D);
timerValue0 := timer0.ET;
timerValue1 := timer1.ET;

lastTimerValue := curTimerValue;
IF curTimer = 0 THEN
    curTimerValue := timerValue0;
ELSE
    curTimerValue := timerValue1;
END_IF;
curDeltaTime := curTimerValue - lastTimerValue;
curDeltaSecs := TIME_TO_LREAL(curDeltaTime) / 1000;
curTime := curTime + curDeltaSecs;

IF cnt MOD 10 = 0 THEN
    curTimer := 1 - curTimer;
    curTimerValue := T#0S;
    timer0(IN := curTimer = 0, PT := T#1D);
    timer1(IN := curTimer = 1, PT := T#1D);
    timerValue0 := timer0.ET;
    timerValue1 := timer1.ET;
END_IF;

IF first THEN
    first := FALSE;

    // Initialize state variables for initial state.
    state0.dvar_M_BoolToEventsDH := elit_X;
    state0.dvar_M_BoolToEventsP := elit_X;
    state0.dvar_M_BoolToEventsS := elit_X;
    state0.dvar_M_BoolToEventsTB := elit_X;
    state0.cvar_M_BTimer1_t := 0.0;
    state0.dvar_M_BTimer1 := elit_Off;
    state0.dvar_M_HardwareMapDH_out_a_Dstartled := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Dresetled := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_DledQ1 := TRUE;
    state0.dvar_M_HardwareMapDH_out_a_DledQ2 := TRUE;
    state0.dvar_M_HardwareMapDH_out_a_Dout4 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Dout5 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Dout6 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Dout7 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_pusher1 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_pusher2 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_pusher3 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Hstartled := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Hresetled := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_HledQ1 := TRUE;
    state0.dvar_M_HardwareMapDH_out_a_HledQ2 := TRUE;
    state0.dvar_M_HardwareMapDH_out_a_Hout4 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Hout5 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Hout6 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_Hout7 := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_x2distributing := TRUE;
    state0.dvar_M_HardwareMapDH_out_a_x2testing := TRUE;
    state0.dvar_M_HardwareMapDH_out_a_zdown := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_gripperclose := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_transfer2pickpos := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_transfer2droppos := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_vacuum := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_ejectpulse := FALSE;
    state0.dvar_M_HardwareMapDH_out_a_handlingready := FALSE;
    state0.dvar_M_HardwareMapDH_init_err_sen_idx := -1;
    state0.dvar_M_HardwareMapDH_init_err_led_idx := 0;
    state0.cvar_M_HardwareMapDH_t := 0.0;
    state0.dvar_M_HardwareMapDH := elit_init0;
    state0.dvar_M_HardwareMapP_out_a_Pstartled := FALSE;
    state0.dvar_M_HardwareMapP_out_a_Presetled := FALSE;
    state0.dvar_M_HardwareMapP_out_a_PledQ1 := TRUE;
    state0.dvar_M_HardwareMapP_out_a_PledQ2 := TRUE;
    state0.dvar_M_HardwareMapP_out_a_Pout4 := FALSE;
    state0.dvar_M_HardwareMapP_out_a_Pout5 := FALSE;
    state0.dvar_M_HardwareMapP_out_a_Pout6 := FALSE;
    state0.dvar_M_HardwareMapP_out_a_Pout7 := FALSE;
    state0.dvar_M_HardwareMapP_out_a_drill := FALSE;
    state0.dvar_M_HardwareMapP_out_a_turntable := FALSE;
    state0.dvar_M_HardwareMapP_out_a_drilldown := FALSE;
    state0.dvar_M_HardwareMapP_out_a_drillup := TRUE;
    state0.dvar_M_HardwareMapP_out_a_clamp := FALSE;
    state0.dvar_M_HardwareMapP_out_a_tester := FALSE;
    state0.dvar_M_HardwareMapP_out_a_eject := FALSE;
    state0.dvar_M_HardwareMapP_out_a_processingready := FALSE;
    state0.dvar_M_HardwareMapP_init_err_sen_idx := -1;
    state0.dvar_M_HardwareMapP_init_err_led_idx := 0;
    state0.cvar_M_HardwareMapP_t := 0.0;
    state0.dvar_M_HardwareMapP := elit_init0;
    state0.dvar_M_HardwareMapS_out_a_Sstartled := FALSE;
    state0.dvar_M_HardwareMapS_out_a_Sresetled := FALSE;
    state0.dvar_M_HardwareMapS_out_a_SledQ1 := TRUE;
    state0.dvar_M_HardwareMapS_out_a_SledQ2 := TRUE;
    state0.dvar_M_HardwareMapS_out_a_Sout4 := FALSE;
    state0.dvar_M_HardwareMapS_out_a_Sout5 := FALSE;
    state0.dvar_M_HardwareMapS_out_a_Sout6 := FALSE;
    state0.dvar_M_HardwareMapS_out_a_Sout7 := FALSE;
    state0.dvar_M_HardwareMapS_out_a_conveyer := FALSE;
    state0.dvar_M_HardwareMapS_out_a_gate1 := FALSE;
    state0.dvar_M_HardwareMapS_out_a_gate2 := FALSE;
    state0.dvar_M_HardwareMapS_out_a_stopperretract := FALSE;
    state0.dvar_M_HardwareMapS_out_a_sortingready := FALSE;
    state0.dvar_M_HardwareMapS_init_err_sen_idx := -1;
    state0.dvar_M_HardwareMapS_init_err_led_idx := 0;
    state0.cvar_M_HardwareMapS_t := 0.0;
    state0.dvar_M_HardwareMapS := elit_init0;
    state0.dvar_M_HardwareMapTB_out_a_Tstartled := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Tresetled := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_TledQ1 := TRUE;
    state0.dvar_M_HardwareMapTB_out_a_TledQ2 := TRUE;
    state0.dvar_M_HardwareMapTB_out_a_Tout4 := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Tout5 := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Tout6 := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Tout7 := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_elevator_up := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_elevator_down := TRUE;
    state0.dvar_M_HardwareMapTB_out_a_pusher := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_airslide := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_testingready := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Bstartled := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Bresetled := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_BledQ1 := TRUE;
    state0.dvar_M_HardwareMapTB_out_a_BledQ2 := TRUE;
    state0.dvar_M_HardwareMapTB_out_a_Bout4 := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Bout5 := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Bout6 := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_Bout7 := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_separator := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_conveyerB := FALSE;
    state0.dvar_M_HardwareMapTB_out_a_bufferingready := FALSE;
    state0.dvar_M_HardwareMapTB_init_err_sen_idx := -1;
    state0.dvar_M_HardwareMapTB_init_err_led_idx := 0;
    state0.cvar_M_HardwareMapTB_t := 0.0;
    state0.dvar_M_HardwareMapTB := elit_init0;
    state0.cvar_M_STimer1_t := 0.0;
    state0.dvar_M_STimer1 := elit_Off;
    state0.dvar_M_sup_A_airslide := elit_Off;
    state0.dvar_M_sup_A_bufferingready := elit_Off;
    state0.dvar_M_sup_A_clamp := elit_Off;
    state0.dvar_M_sup_A_conveyer := elit_Off;
    state0.dvar_M_sup_A_conveyerB := elit_Off;
    state0.dvar_M_sup_A_drill := elit_Off;
    state0.dvar_M_sup_A_drilldown := elit_Off;
    state0.dvar_M_sup_A_drillup := elit_On;
    state0.dvar_M_sup_A_eject := elit_Off;
    state0.dvar_M_sup_A_ejectpulse := elit_Off;
    state0.dvar_M_sup_A_elevator_down := elit_On;
    state0.dvar_M_sup_A_elevator_up := elit_Off;
    state0.dvar_M_sup_A_gate1 := elit_Off;
    state0.dvar_M_sup_A_gate2 := elit_Off;
    state0.dvar_M_sup_A_gripperclose := elit_Off;
    state0.dvar_M_sup_A_handlingready := elit_Off;
    state0.dvar_M_sup_A_processingready := elit_Off;
    state0.dvar_M_sup_A_pusher := elit_Off;
    state0.dvar_M_sup_A_pusher1 := elit_Off;
    state0.dvar_M_sup_A_pusher2 := elit_Off;
    state0.dvar_M_sup_A_pusher3 := elit_Off;
    state0.dvar_M_sup_A_separator := elit_On;
    state0.dvar_M_sup_A_sortingready := elit_Off;
    state0.dvar_M_sup_A_stopperretract := elit_Off;
    state0.dvar_M_sup_A_tester := elit_Off;
    state0.dvar_M_sup_A_testingready := elit_Off;
    state0.dvar_M_sup_A_transfer2droppos := elit_Off;
    state0.dvar_M_sup_A_transfer2pickpos := elit_Off;
    state0.dvar_M_sup_A_turntable := elit_Off;
    state0.dvar_M_sup_A_vacuum := elit_Off;
    state0.dvar_M_sup_A_x2distributing := elit_On;
    state0.dvar_M_sup_A_x2testing := elit_On;
    state0.dvar_M_sup_A_zdown := elit_Off;
    state0.dvar_M_sup_BDynamics := elit_X;
    state0.dvar_M_sup_BTimer := elit_Off;
    state0.dvar_M_sup_ClampDrill := elit_one2;
    state0.dvar_M_sup_DDynamics1 := elit_X;
    state0.dvar_M_sup_DDynamics2 := elit_X;
    state0.dvar_M_sup_DDynamics3 := elit_X;
    state0.dvar_M_sup_HDynamics1 := elit_X;
    state0.dvar_M_sup_HDynamics2 := elit_X;
    state0.dvar_M_sup_HDynamics3 := elit_X;
    state0.dvar_M_sup_PDynamics := elit_X;
    state0.dvar_M_sup_PusherLift := elit_One;
    state0.dvar_M_sup_S_atdrill := elit_Off;
    state0.dvar_M_sup_S_atend := elit_Off;
    state0.dvar_M_sup_S_atexit := elit_Off;
    state0.dvar_M_sup_S_atin := elit_Off;
    state0.dvar_M_sup_S_atinput := elit_Off;
    state0.dvar_M_sup_S_atseparator := elit_Off;
    state0.dvar_M_sup_S_atspare := elit_Off;
    state0.dvar_M_sup_S_attest := elit_Off;
    state0.dvar_M_sup_S_Binitialized := elit_Off;
    state0.dvar_M_sup_S_bufferingbusy := elit_On;
    state0.dvar_M_sup_S_capacitive := elit_Off;
    state0.dvar_M_sup_S_clamp := elit_Off;
    state0.dvar_M_sup_S_Dinitialized := elit_Off;
    state0.dvar_M_sup_S_drill_down := elit_Off;
    state0.dvar_M_sup_S_drill_up := elit_On;
    state0.dvar_M_sup_S_elevator_down := elit_On;
    state0.dvar_M_sup_S_elevator_up := elit_Off;
    state0.dvar_M_sup_S_gate1_closed := elit_Off;
    state0.dvar_M_sup_S_gate1_opened := elit_On;
    state0.dvar_M_sup_S_gate2_closed := elit_Off;
    state0.dvar_M_sup_S_gate2_opened := elit_On;
    state0.dvar_M_sup_S_gripper := elit_Off;
    state0.dvar_M_sup_S_handlingbusy := elit_On;
    state0.dvar_M_sup_S_Hinitialized := elit_Off;
    state0.dvar_M_sup_S_inductive := elit_Off;
    state0.dvar_M_sup_S_optical := elit_Off;
    state0.dvar_M_sup_S_opticalT := elit_Off;
    state0.dvar_M_sup_S_Pinitialized := elit_Off;
    state0.dvar_M_sup_S_processingbusy := elit_On;
    state0.dvar_M_sup_S_product := elit_Off;
    state0.dvar_M_sup_S_product1 := elit_Off;
    state0.dvar_M_sup_S_product2 := elit_Off;
    state0.dvar_M_sup_S_product3 := elit_Off;
    state0.dvar_M_sup_S_product4 := elit_Off;
    state0.dvar_M_sup_S_productheight := elit_Off;
    state0.dvar_M_sup_S_pusher := elit_Off;
    state0.dvar_M_sup_S_pusher1_in := elit_On;
    state0.dvar_M_sup_S_pusher1_out := elit_Off;
    state0.dvar_M_sup_S_pusher2_in := elit_On;
    state0.dvar_M_sup_S_pusher2_out := elit_Off;
    state0.dvar_M_sup_S_pusher3_in := elit_On;
    state0.dvar_M_sup_S_pusher3_out := elit_Off;
    state0.dvar_M_sup_S_reflective := elit_Off;
    state0.dvar_M_sup_S_separator_closed := elit_On;
    state0.dvar_M_sup_S_separator_opened := elit_Off;
    state0.dvar_M_sup_S_Sinitialized := elit_Off;
    state0.dvar_M_sup_S_slidefull := elit_Off;
    state0.dvar_M_sup_S_sortingbusy := elit_On;
    state0.dvar_M_sup_S_stack1_filled := elit_On;
    state0.dvar_M_sup_S_stack2_filled := elit_On;
    state0.dvar_M_sup_S_stack3_filled := elit_On;
    state0.dvar_M_sup_S_test_ok := elit_Off;
    state0.dvar_M_sup_S_testingbusy := elit_On;
    state0.dvar_M_sup_S_Tinitialized := elit_Off;
    state0.dvar_M_sup_S_transfer_atdrop := elit_Off;
    state0.dvar_M_sup_S_transfer_athalfway := elit_On;
    state0.dvar_M_sup_S_transfer_atpickup := elit_Off;
    state0.dvar_M_sup_S_turntable := elit_On;
    state0.dvar_M_sup_S_vacuum := elit_Off;
    state0.dvar_M_sup_S_xpos_at1 := elit_Off;
    state0.dvar_M_sup_S_xpos_at2 := elit_Off;
    state0.dvar_M_sup_S_xpos_at3 := elit_Off;
    state0.dvar_M_sup_S_xpos_atdrop := elit_On;
    state0.dvar_M_sup_S_zpos_atdown := elit_Off;
    state0.dvar_M_sup_S_zpos_atup := elit_On;
    state0.dvar_M_sup_SDynamics1 := elit_X;
    state0.dvar_M_sup_SDynamics2 := elit_X;
    state0.dvar_M_sup_STimer := elit_Off;
    state0.dvar_M_sup_sup := elit_X;
    state0.dvar_M_sup_TDynamics := elit_X;
    state0.dvar_M_sup_Tester := elit_One;
    state0.dvar_M_sup_Timer := elit_Off;
    state0.dvar_M_sup_TTimer := elit_Off;
    state0.cvar_M_Timer1_t := 0.0;
    state0.dvar_M_Timer1 := elit_Off;
    state0.cvar_M_TTimer1_t := 0.0;
    state0.dvar_M_TTimer1 := elit_Off;
ELSE
    // Update continuous variables for time delay.
    state1.cvar_M_BTimer1_t := state0.cvar_M_BTimer1_t + curDeltaSecs * derivcvar_M_BTimer1_t(state0);
    state1.cvar_M_HardwareMapDH_t := state0.cvar_M_HardwareMapDH_t + curDeltaSecs * derivcvar_M_HardwareMapDH_t(state0);
    state1.cvar_M_HardwareMapP_t := state0.cvar_M_HardwareMapP_t + curDeltaSecs * derivcvar_M_HardwareMapP_t(state0);
    state1.cvar_M_HardwareMapS_t := state0.cvar_M_HardwareMapS_t + curDeltaSecs * derivcvar_M_HardwareMapS_t(state0);
    state1.cvar_M_HardwareMapTB_t := state0.cvar_M_HardwareMapTB_t + curDeltaSecs * derivcvar_M_HardwareMapTB_t(state0);
    state1.cvar_M_STimer1_t := state0.cvar_M_STimer1_t + curDeltaSecs * derivcvar_M_STimer1_t(state0);
    state1.cvar_M_Timer1_t := state0.cvar_M_Timer1_t + curDeltaSecs * derivcvar_M_Timer1_t(state0);
    state1.cvar_M_TTimer1_t := state0.cvar_M_TTimer1_t + curDeltaSecs * derivcvar_M_TTimer1_t(state0);

    state0.curTime := curTime;
    state0.cvar_M_BTimer1_t := state1.cvar_M_BTimer1_t;
    state0.cvar_M_HardwareMapDH_t := state1.cvar_M_HardwareMapDH_t;
    state0.cvar_M_HardwareMapP_t := state1.cvar_M_HardwareMapP_t;
    state0.cvar_M_HardwareMapS_t := state1.cvar_M_HardwareMapS_t;
    state0.cvar_M_HardwareMapTB_t := state1.cvar_M_HardwareMapTB_t;
    state0.cvar_M_STimer1_t := state1.cvar_M_STimer1_t;
    state0.cvar_M_Timer1_t := state1.cvar_M_Timer1_t;
    state0.cvar_M_TTimer1_t := state1.cvar_M_TTimer1_t;
END_IF;

// Event loop.
WHILE TRUE DO
    progress := FALSE;

    // Event "A_airslide_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_airslide) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_airslide := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_airslide_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_airslide) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_airslide := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_bufferingready_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_bufferingready) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Binitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_bufferingready := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_bufferingready_c_on".
    IF NOT progress THEN
        IF FALSE THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_bufferingready := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_clamp_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_clamp) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_ClampDrill) = (elit_eight));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_clamp := elit_Off;
            state1.dvar_M_sup_ClampDrill := elit_nine;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_clamp_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_clamp) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_ClampDrill) = (elit_one2));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_turntable) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_atdrill) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_Timer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_clamp := elit_On;
            state1.dvar_M_sup_ClampDrill := elit_two2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_conveyer_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_conveyer) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_slidefull) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_conveyer := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_conveyer_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_conveyer) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_product) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_conveyer := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_conveyerB_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_conveyerB) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_BTimer) = (elit_Timeout));
        b1 := b1 AND ((state0.dvar_M_sup_S_Binitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_conveyerB := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_conveyerB_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_conveyerB) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_atin) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Binitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_conveyerB := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_drill_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_drill) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_ClampDrill) = (elit_seven));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_down) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_drill := elit_Off;
            state1.dvar_M_sup_ClampDrill := elit_eight;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_drill_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_drill) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_ClampDrill) = (elit_two2));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_clamp) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_drill := elit_On;
            state1.dvar_M_sup_ClampDrill := elit_three2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_drilldown_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_drilldown) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_ClampDrill) = (elit_five));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_down) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_drilldown := elit_Off;
            state1.dvar_M_sup_ClampDrill := elit_six;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_drilldown_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_drilldown) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_ClampDrill) = (elit_four2));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_drilldown := elit_On;
            state1.dvar_M_sup_ClampDrill := elit_five;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_drillup_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_drillup) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_ClampDrill) = (elit_three2));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_drillup := elit_Off;
            state1.dvar_M_sup_ClampDrill := elit_four2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_drillup_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_drillup) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_ClampDrill) = (elit_six));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_down) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_drillup := elit_On;
            state1.dvar_M_sup_ClampDrill := elit_seven;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_eject_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_eject) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_conveyer) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_atexit) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_eject := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_eject_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_eject) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_turntable) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_atexit) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_Timer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_eject := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_ejectpulse_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_ejectpulse) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_vacuum) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_ejectpulse := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_ejectpulse_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_ejectpulse) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_vacuum) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_ejectpulse := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_elevator_down_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_elevator_down) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_PusherLift) = (elit_One));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_reflective) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_capacitive) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_TTimer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_elevator_down := elit_Off;
            state1.dvar_M_sup_PusherLift := elit_Two;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_elevator_down_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_elevator_down) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_PusherLift) = (elit_Four));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_elevator_up) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_opticalT) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_TTimer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_elevator_down := elit_On;
            state1.dvar_M_sup_PusherLift := elit_One;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_elevator_up_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_elevator_up) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_opticalT) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_TTimer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_elevator_up := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_elevator_up_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_elevator_up) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_elevator_down) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_reflective) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_capacitive) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_TTimer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_elevator_up := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_gate1_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_gate1) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_stopperretract) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_slidefull) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_gate1 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_gate1_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_gate1) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_stopperretract) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_inductive) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_optical) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_STimer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_gate1 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_gate2_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_gate2) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_stopperretract) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_slidefull) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_gate2 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_gate2_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_gate2) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_stopperretract) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_inductive) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_optical) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_STimer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_gate2 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_gripperclose_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_gripperclose) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_gripperclose := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_gripperclose_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_gripperclose) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
            b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_gripperclose := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_handlingready_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_handlingready) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_handlingready := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_handlingready_c_on".
    IF NOT progress THEN
        IF FALSE THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_handlingready := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_processingready_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_processingready) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_processingready := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_processingready_c_on".
    IF NOT progress THEN
        IF FALSE THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_processingready := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_pusher_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_pusher) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_PusherLift) = (elit_Three));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_pusher := elit_Off;
            state1.dvar_M_sup_PusherLift := elit_Four;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_pusher_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_pusher) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_PusherLift) = (elit_Two));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_pusher := elit_On;
            state1.dvar_M_sup_PusherLift := elit_Three;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_pusher1_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_pusher1) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Dinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher1_out) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_stack1_filled) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_pusher1 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_pusher1_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_pusher1) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Dinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher1_in) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_pusher1 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_pusher2_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_pusher2) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Dinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher2_out) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_stack2_filled) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_pusher2 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_pusher2_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_pusher2) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Dinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher2_in) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_pusher2 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_pusher3_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_pusher3) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Dinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher3_out) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_stack3_filled) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_pusher3 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_pusher3_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_pusher3) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Dinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher3_in) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_pusher3 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_separator_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_separator) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_atinput) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_atseparator) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_Binitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_separator_opened) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_separator := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_separator_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_separator) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_atseparator) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Binitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_separator_closed) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_separator := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_sortingready_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_sortingready) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_sortingready := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_sortingready_c_on".
    IF NOT progress THEN
        IF FALSE THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_sortingready := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_stopperretract_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_stopperretract) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_slidefull) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_stopperretract := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_stopperretract_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_stopperretract) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_slidefull) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_STimer) = (elit_Timeout));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_stopperretract := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_tester_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_tester) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_test_ok) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_Tester) = (elit_Two));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_tester := elit_Off;
            state1.dvar_M_sup_Tester := elit_Three;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_tester_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_tester) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_turntable) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_attest) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_Timer) = (elit_Timeout));
        b1 := b1 AND ((state0.dvar_M_sup_Tester) = (elit_One));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_tester := elit_On;
            state1.dvar_M_sup_Tester := elit_Two;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_testingready_c_off".
    IF NOT progress THEN
        IF FALSE THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_testingready := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_testingready_c_on".
    IF NOT progress THEN
        IF FALSE THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_testingready := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_transfer2droppos_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_transfer2droppos) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_elevator_down) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_capacitive) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_elevator_down) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_capacitive) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_elevator_down) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_transfer2droppos := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_transfer2droppos_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_transfer2droppos) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_sup_A_transfer2pickpos) = (elit_Off);
            b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_capacitive) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_vacuum) = (elit_On));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_transfer2pickpos) = (elit_Off);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_capacitive) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_vacuum) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_transfer2pickpos) = (elit_Off);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_capacitive) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_vacuum) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_transfer2pickpos) = (elit_Off);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_vacuum) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_transfer2droppos := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_transfer2pickpos_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_transfer2pickpos) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
            b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_On));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_transfer2pickpos := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_transfer2pickpos_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_transfer2pickpos) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_sup_A_transfer2droppos) = (elit_Off);
            b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_vacuum) = (elit_Off));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_transfer2droppos) = (elit_Off);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_vacuum) = (elit_Off));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_transfer2droppos) = (elit_Off);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_vacuum) = (elit_Off));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_transfer2pickpos := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_turntable_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_turntable) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_turntable := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_turntable_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_turntable) = (elit_Off);
        IF b1 THEN
            b2 := (state0.dvar_M_sup_ClampDrill) = (elit_one2);
            b2 := b2 OR ((state0.dvar_M_sup_ClampDrill) = (elit_nine));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_A_eject) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_atinput) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_clamp) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_up) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_Timer) = (elit_Timeout));
        IF b1 THEN
            b2 := (state0.dvar_M_sup_Tester) = (elit_One);
            b2 := b2 OR ((state0.dvar_M_sup_Tester) = (elit_Three));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_turntable := elit_On;
            IF ((state0.dvar_M_sup_ClampDrill) = (elit_one2)) THEN
                state1.dvar_M_sup_ClampDrill := elit_one2;
            ELSIF ((state0.dvar_M_sup_ClampDrill) = (elit_nine)) THEN
                state1.dvar_M_sup_ClampDrill := elit_one2;
            END_IF;
            IF ((state0.dvar_M_sup_Tester) = (elit_One)) THEN
                state1.dvar_M_sup_Tester := elit_One;
            ELSIF ((state0.dvar_M_sup_Tester) = (elit_Three)) THEN
                state1.dvar_M_sup_Tester := elit_One;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_vacuum_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_vacuum) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_vacuum := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_vacuum_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_vacuum) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_vacuum := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_x2distributing_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_sup_A_x2testing) = (elit_On);
            b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2testing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2testing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2testing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2testing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2testing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2testing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_x2distributing := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_x2distributing_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_x2distributing) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product4) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product4) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_x2distributing := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_x2testing_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_x2testing) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
            b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
            b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_x2testing := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_x2testing_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_x2testing) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_product1) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product2) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product3) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_product1) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product2) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_product1) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product2) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_product3) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_product1) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product2) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_product3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_product1) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_product2) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product3) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_product1) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_product2) = (elit_Off));
            b2 := b2 OR ((state0.dvar_M_sup_S_product3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_S_Hinitialized) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_product1) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_product2) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b2 := b2 OR ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_x2testing := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_zdown_c_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_zdown) = (elit_On);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
            b3 := b3 AND ((state0.dvar_M_sup_A_gripperclose) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_gripperclose) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_gripperclose) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_S_Hinitialized) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_gripperclose) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_zdown := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "A_zdown_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_A_zdown) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
            b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
            b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
            b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_x2distributing) = (elit_On);
                b3 := b3 AND ((state0.dvar_M_sup_A_x2testing) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
                b3 := b3 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
                b3 := b3 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_A_zdown := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "BTimer_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BTimer1) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_BTimer) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_atend) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_BTimer1 := elit_Running;
            state1.dvar_M_sup_BTimer := elit_Running;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "BTimer_c_reset".
    IF NOT progress THEN
        b2 := (state0.dvar_M_BTimer1) = (elit_Running);
        b2 := b2 OR ((state0.dvar_M_BTimer1) = (elit_Timeout));
        b1 := b2;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_BTimer) = (elit_Running);
            b2 := b2 OR ((state0.dvar_M_sup_BTimer) = (elit_Timeout));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        IF b1 THEN
            b2 := (state0.dvar_M_sup_A_conveyerB) = (elit_Off);
            b2 := b2 OR ((state0.dvar_M_sup_S_atin) = (elit_On));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_BTimer1) = (elit_Running)) THEN
                state1.cvar_M_BTimer1_t := 0.0;
                state1.dvar_M_BTimer1 := elit_Off;
            ELSIF ((state0.dvar_M_BTimer1) = (elit_Timeout)) THEN
                state1.cvar_M_BTimer1_t := 0.0;
                state1.dvar_M_BTimer1 := elit_Off;
            END_IF;
            IF ((state0.dvar_M_sup_BTimer) = (elit_Running)) THEN
                state1.dvar_M_sup_BTimer := elit_Off;
            ELSIF ((state0.dvar_M_sup_BTimer) = (elit_Timeout)) THEN
                state1.dvar_M_sup_BTimer := elit_Off;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "BTimer_u_timeout".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BTimer1) = (elit_Running);
        b1 := b1 AND ((state0.cvar_M_BTimer1_t) &gt; (0.5));
        b1 := b1 AND ((state0.dvar_M_sup_BTimer) = (elit_Running));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_BTimer1 := elit_Timeout;
            state1.dvar_M_sup_BTimer := elit_Timeout;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atdrill_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_atdrill));
        b1 := b1 AND ((state0.dvar_M_sup_S_atdrill) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atdrill := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atdrill_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_atdrill);
        b1 := b1 AND ((state0.dvar_M_sup_S_atdrill) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atdrill := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atend_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_atend));
        b1 := b1 AND ((state0.dvar_M_sup_S_atend) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atend := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atend_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_atend);
        b1 := b1 AND ((state0.dvar_M_sup_S_atend) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atend := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atexit_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_atexit));
        b1 := b1 AND ((state0.dvar_M_sup_S_atexit) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atexit := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atexit_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_atexit);
        b1 := b1 AND ((state0.dvar_M_sup_S_atexit) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atexit := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atin_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_atin));
        b1 := b1 AND ((state0.dvar_M_sup_S_atin) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atin := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atin_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_atin);
        b1 := b1 AND ((state0.dvar_M_sup_S_atin) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atin := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atinput_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_atinput));
        b1 := b1 AND ((state0.dvar_M_sup_S_atinput) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atinput := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atinput_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_atinput);
        b1 := b1 AND ((state0.dvar_M_sup_S_atinput) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atinput := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atseparator_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_atseparator));
        b1 := b1 AND ((state0.dvar_M_sup_S_atseparator) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atseparator := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atseparator_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_atseparator);
        b1 := b1 AND ((state0.dvar_M_sup_S_atseparator) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atseparator := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atspare_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_atspare));
        b1 := b1 AND ((state0.dvar_M_sup_S_atspare) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atspare := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_atspare_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_atspare);
        b1 := b1 AND ((state0.dvar_M_sup_S_atspare) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_atspare := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_attest_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_attest));
        b1 := b1 AND ((state0.dvar_M_sup_S_attest) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_attest := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_attest_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_attest);
        b1 := b1 AND ((state0.dvar_M_sup_S_attest) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_attest := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Binitialized_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB) &lt;&gt; (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Binitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Binitialized := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Binitialized_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB) = (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Binitialized) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Binitialized := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_bufferingbusy_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_bufferingbusy));
        b1 := b1 AND ((state0.dvar_M_sup_S_bufferingbusy) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_bufferingbusy := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_bufferingbusy_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_bufferingbusy);
        b1 := b1 AND ((state0.dvar_M_sup_S_bufferingbusy) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_bufferingbusy := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_capacitive_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_capacitive));
        b1 := b1 AND ((state0.dvar_M_sup_S_capacitive) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_capacitive := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_capacitive_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_capacitive);
        b1 := b1 AND ((state0.dvar_M_sup_S_capacitive) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_capacitive := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_clamp_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_clamp));
        b1 := b1 AND ((state0.dvar_M_sup_S_clamp) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_clamp := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_clamp_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_clamp);
        b1 := b1 AND ((state0.dvar_M_sup_S_clamp) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_clamp := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Dinitialized_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH) &lt;&gt; (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Dinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Dinitialized := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Dinitialized_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH) = (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Dinitialized) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Dinitialized := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_drill_down_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_drill_down));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_down) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_drill_down := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_drill_down_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_drill_down);
        b1 := b1 AND ((state0.dvar_M_sup_PDynamics) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_up) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_down) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_drill_down := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_drill_up_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_drill_up));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_up) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_drill_up := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_drill_up_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_drill_up);
        b1 := b1 AND ((state0.dvar_M_sup_PDynamics) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_down) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_drill_up) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_drill_up := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_elevator_down_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_elevator_down));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_elevator_down := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_elevator_down_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_elevator_down);
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_TDynamics) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_up) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_elevator_down := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_elevator_up_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_elevator_up));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_up) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_elevator_up := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_elevator_up_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_elevator_up);
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_up) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_TDynamics) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_elevator_down) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_elevator_up := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gate1_closed_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_gate1_closed));
        b1 := b1 AND ((state0.dvar_M_sup_S_gate1_closed) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gate1_closed := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gate1_closed_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (ivar_s_gate1_closed);
        b1 := b1 AND ((state0.dvar_M_sup_S_gate1_closed) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_SDynamics1) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_gate1_opened) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gate1_closed := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gate1_opened_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_gate1_opened));
        b1 := b1 AND ((state0.dvar_M_sup_S_gate1_opened) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gate1_opened := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gate1_opened_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (ivar_s_gate1_opened);
        b1 := b1 AND ((state0.dvar_M_sup_S_gate1_opened) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_SDynamics1) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_gate1_closed) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gate1_opened := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gate2_closed_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_gate2_closed));
        b1 := b1 AND ((state0.dvar_M_sup_S_gate2_closed) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gate2_closed := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gate2_closed_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (ivar_s_gate2_closed);
        b1 := b1 AND ((state0.dvar_M_sup_S_gate2_closed) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_SDynamics2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_gate2_opened) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gate2_closed := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gate2_opened_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_gate2_opened));
        b1 := b1 AND ((state0.dvar_M_sup_S_gate2_opened) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gate2_opened := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gate2_opened_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (ivar_s_gate2_opened);
        b1 := b1 AND ((state0.dvar_M_sup_S_gate2_opened) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_SDynamics2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_gate2_closed) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gate2_opened := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gripper_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND ((state0.dvar_M_sup_S_gripper) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gripper := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_gripper_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND ((state0.dvar_M_sup_S_gripper) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_gripper := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_handlingbusy_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_handlingbusy));
        b1 := b1 AND ((state0.dvar_M_sup_S_handlingbusy) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_handlingbusy := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_handlingbusy_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_handlingbusy);
        b1 := b1 AND ((state0.dvar_M_sup_S_handlingbusy) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_handlingbusy := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Hinitialized_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH) &lt;&gt; (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Hinitialized := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Hinitialized_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH) = (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Hinitialized) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Hinitialized := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_inductive_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_inductive));
        b1 := b1 AND ((state0.dvar_M_sup_S_inductive) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_inductive := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_inductive_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (ivar_s_inductive);
        b1 := b1 AND ((state0.dvar_M_sup_S_inductive) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_inductive := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_optical_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_optical));
        b1 := b1 AND ((state0.dvar_M_sup_S_optical) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_optical := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_optical_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (ivar_s_optical);
        b1 := b1 AND ((state0.dvar_M_sup_S_optical) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_optical := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_opticalT_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_opticalT));
        b1 := b1 AND ((state0.dvar_M_sup_S_opticalT) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_opticalT := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_opticalT_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_opticalT);
        b1 := b1 AND ((state0.dvar_M_sup_S_opticalT) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_opticalT := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Pinitialized_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP) &lt;&gt; (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Pinitialized := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Pinitialized_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP) = (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Pinitialized) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Pinitialized := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_processingbusy_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_processingbusy));
        b1 := b1 AND ((state0.dvar_M_sup_S_processingbusy) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_processingbusy := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_processingbusy_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_processingbusy);
        b1 := b1 AND ((state0.dvar_M_sup_S_processingbusy) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_processingbusy := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_product));
        b1 := b1 AND ((state0.dvar_M_sup_S_product) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (ivar_s_product);
        b1 := b1 AND ((state0.dvar_M_sup_S_product) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product1_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        IF b1 THEN
            b2 := NOT(ivar_s_product1);
            b2 := b2 OR (NOT(ivar_s_product1));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_product1) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product1 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product1_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        IF b1 THEN
            b2 := ivar_s_product1;
            b2 := b2 OR (ivar_s_product1);
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_product1) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product1 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product2_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        IF b1 THEN
            b2 := NOT(ivar_s_product2);
            b2 := b2 OR (NOT(ivar_s_product2));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_product2) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product2 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product2_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        IF b1 THEN
            b2 := ivar_s_product2;
            b2 := b2 OR (ivar_s_product2);
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_product2) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product2 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product3_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        IF b1 THEN
            b2 := NOT(ivar_s_product3);
            b2 := b2 OR (NOT(ivar_s_product3));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_product3) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product3 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product3_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        IF b1 THEN
            b2 := ivar_s_product3;
            b2 := b2 OR (ivar_s_product3);
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_product3) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product3 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product4_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_product4));
        b1 := b1 AND ((state0.dvar_M_sup_S_product4) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product4 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_product4_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_product4);
        b1 := b1 AND ((state0.dvar_M_sup_S_product4) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_product4 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_productheight_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_productheight));
        b1 := b1 AND ((state0.dvar_M_sup_S_productheight) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_productheight := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_productheight_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_productheight);
        b1 := b1 AND ((state0.dvar_M_sup_S_productheight) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_productheight := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_pusher));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_pusher);
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher1_in_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_pusher1_in));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher1_in) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher1_in := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher1_in_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_pusher1_in);
        b1 := b1 AND ((state0.dvar_M_sup_DDynamics1) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher1_out) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher1_in) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher1_in := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher1_out_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_pusher1_out));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher1_out) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher1_out := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher1_out_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_pusher1_out);
        b1 := b1 AND ((state0.dvar_M_sup_DDynamics1) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher1_in) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher1_out) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher1_out := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher2_in_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_pusher2_in));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher2_in) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher2_in := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher2_in_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_pusher2_in);
        b1 := b1 AND ((state0.dvar_M_sup_DDynamics2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher2_out) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher2_in) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher2_in := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher2_out_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_pusher2_out));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher2_out) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher2_out := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher2_out_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_pusher2_out);
        b1 := b1 AND ((state0.dvar_M_sup_DDynamics2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher2_in) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher2_out) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher2_out := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher3_in_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_pusher3_in));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher3_in) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher3_in := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher3_in_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_pusher3_in);
        b1 := b1 AND ((state0.dvar_M_sup_DDynamics3) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher3_out) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher3_in) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher3_in := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher3_out_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_pusher3_out));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher3_out) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher3_out := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_pusher3_out_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_pusher3_out);
        b1 := b1 AND ((state0.dvar_M_sup_DDynamics3) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher3_in) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_pusher3_out) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_pusher3_out := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_reflective_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_reflective));
        b1 := b1 AND ((state0.dvar_M_sup_S_reflective) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_reflective := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_reflective_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_reflective);
        b1 := b1 AND ((state0.dvar_M_sup_S_reflective) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_reflective := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_separator_closed_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_separator_closed));
        b1 := b1 AND ((state0.dvar_M_sup_S_separator_closed) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_separator_closed := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_separator_closed_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_separator_closed);
        b1 := b1 AND ((state0.dvar_M_sup_BDynamics) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_separator_opened) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_separator_closed) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_separator_closed := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_separator_opened_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_separator_opened));
        b1 := b1 AND ((state0.dvar_M_sup_S_separator_opened) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_separator_opened := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_separator_opened_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND (ivar_s_separator_opened);
        b1 := b1 AND ((state0.dvar_M_sup_BDynamics) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_separator_closed) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_separator_opened) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_separator_opened := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Sinitialized_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS) &lt;&gt; (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Sinitialized := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Sinitialized_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS) = (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Sinitialized) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Sinitialized := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_slidefull_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_slidefull));
        b1 := b1 AND ((state0.dvar_M_sup_S_slidefull) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_slidefull := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_slidefull_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsS) = (elit_X);
        b1 := b1 AND (ivar_s_slidefull);
        b1 := b1 AND ((state0.dvar_M_sup_S_slidefull) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_slidefull := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_sortingbusy_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_sortingbusy));
        b1 := b1 AND ((state0.dvar_M_sup_S_sortingbusy) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_sortingbusy := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_sortingbusy_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_sortingbusy);
        b1 := b1 AND ((state0.dvar_M_sup_S_sortingbusy) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_sortingbusy := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_stack1_filled_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_stack1filled));
        b1 := b1 AND ((state0.dvar_M_sup_S_stack1_filled) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_stack1_filled := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_stack1_filled_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_stack1filled);
        b1 := b1 AND ((state0.dvar_M_sup_S_stack1_filled) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_stack1_filled := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_stack2_filled_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_stack2filled));
        b1 := b1 AND ((state0.dvar_M_sup_S_stack2_filled) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_stack2_filled := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_stack2_filled_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_stack2filled);
        b1 := b1 AND ((state0.dvar_M_sup_S_stack2_filled) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_stack2_filled := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_stack3_filled_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_stack3filled));
        b1 := b1 AND ((state0.dvar_M_sup_S_stack3_filled) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_stack3_filled := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_stack3_filled_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_stack3filled);
        b1 := b1 AND ((state0.dvar_M_sup_S_stack3_filled) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_stack3_filled := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_test_ok_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_test_ok));
        b1 := b1 AND ((state0.dvar_M_sup_S_test_ok) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_test_ok := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_test_ok_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_test_ok);
        b1 := b1 AND ((state0.dvar_M_sup_S_test_ok) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_test_ok := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_testingbusy_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_testingbusy));
        b1 := b1 AND ((state0.dvar_M_sup_S_testingbusy) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_testingbusy := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_testingbusy_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_testingbusy);
        b1 := b1 AND ((state0.dvar_M_sup_S_testingbusy) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_testingbusy := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Tinitialized_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB) &lt;&gt; (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Tinitialized := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_Tinitialized_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsTB) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB) = (elit_initialized));
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_Tinitialized := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_transfer_atdrop_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_transfer_atdrop));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_transfer_atdrop := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_transfer_atdrop_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_transfer_atdrop);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_transfer_atdrop := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_transfer_athalfway_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_transfer_athalfway));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_transfer_athalfway := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_transfer_athalfway_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_transfer_athalfway := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_transfer_atpickup_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_transfer_atpickup));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_transfer_atpickup := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_transfer_atpickup_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics2) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atdrop) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_athalfway) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_transfer_atpickup) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_transfer_atpickup := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_turntable_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_turntable));
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_turntable := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_turntable_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsP) = (elit_X);
        b1 := b1 AND (ivar_s_turntable);
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_turntable := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_vacuum_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        b1 := b1 AND ((state0.dvar_M_sup_S_vacuum) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_vacuum := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_vacuum_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_vacuum);
        b1 := b1 AND ((state0.dvar_M_sup_S_vacuum) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_vacuum := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_xpos_at1_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_xpos_at1));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_xpos_at1 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_xpos_at1_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_xpos_at1);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics1) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_xpos_at1 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_xpos_at2_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_xpos_at2));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_xpos_at2 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_xpos_at2_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_xpos_at2);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics1) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_xpos_at2 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_xpos_at3_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_xpos_at3));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_xpos_at3 := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_xpos_at3_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_xpos_at3);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics1) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_xpos_at3 := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_xpos_atdrop_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_xpos_atdrop));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_xpos_atdrop := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_xpos_atdrop_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics1) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at1) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at2) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_at3) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_xpos_atdrop) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_xpos_atdrop := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_zpos_atdown_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_zpos_atdown));
        b1 := b1 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_zpos_atdown := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_zpos_atdown_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_zpos_atdown);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics3) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_zpos_atdown := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_zpos_atup_u_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (NOT(ivar_s_zpos_atup));
        b1 := b1 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_zpos_atup := elit_Off;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "S_zpos_atup_u_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_BoolToEventsDH) = (elit_X);
        b1 := b1 AND (ivar_s_zpos_atup);
        b1 := b1 AND ((state0.dvar_M_sup_HDynamics3) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_zpos_atdown) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_S_zpos_atup) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_S_zpos_atup := elit_On;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "STimer_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_STimer1) = (elit_Off);
        b1 := b1 AND ((state0.dvar_M_sup_STimer) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_product) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_STimer1 := elit_Running;
            state1.dvar_M_sup_STimer := elit_Running;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "STimer_c_reset".
    IF NOT progress THEN
        b2 := (state0.dvar_M_STimer1) = (elit_Running);
        b2 := b2 OR ((state0.dvar_M_STimer1) = (elit_Timeout));
        b1 := b2;
        IF b1 THEN
            b2 := (state0.dvar_M_sup_STimer) = (elit_Running);
            b2 := b2 OR ((state0.dvar_M_sup_STimer) = (elit_Timeout));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_sup) = (elit_X));
        b1 := b1 AND ((state0.dvar_M_sup_S_slidefull) = (elit_On));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_STimer1) = (elit_Running)) THEN
                state1.cvar_M_STimer1_t := 0.0;
                state1.dvar_M_STimer1 := elit_Off;
            ELSIF ((state0.dvar_M_STimer1) = (elit_Timeout)) THEN
                state1.cvar_M_STimer1_t := 0.0;
                state1.dvar_M_STimer1 := elit_Off;
            END_IF;
            IF ((state0.dvar_M_sup_STimer) = (elit_Running)) THEN
                state1.dvar_M_sup_STimer := elit_Off;
            ELSIF ((state0.dvar_M_sup_STimer) = (elit_Timeout)) THEN
                state1.dvar_M_sup_STimer := elit_Off;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "STimer_u_timeout".
    IF NOT progress THEN
        b1 := (state0.dvar_M_STimer1) = (elit_Running);
        b1 := b1 AND ((state0.cvar_M_STimer1_t) &gt; (0.5));
        b1 := b1 AND ((state0.dvar_M_sup_STimer) = (elit_Running));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_STimer1 := elit_Timeout;
            state1.dvar_M_sup_STimer := elit_Timeout;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Timer_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_sup) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_On));
        b1 := b1 AND ((state0.dvar_M_sup_Timer) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_Timer1) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_Timer := elit_Running;
            state1.dvar_M_Timer1 := elit_Running;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Timer_c_reset".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_sup) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_sup_S_turntable) = (elit_Off));
        IF b1 THEN
            b2 := (state0.dvar_M_sup_Timer) = (elit_Running);
            b2 := b2 OR ((state0.dvar_M_sup_Timer) = (elit_Timeout));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_Timer1) = (elit_Running);
            b2 := b2 OR ((state0.dvar_M_Timer1) = (elit_Timeout));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_sup_Timer) = (elit_Running)) THEN
                state1.dvar_M_sup_Timer := elit_Off;
            ELSIF ((state0.dvar_M_sup_Timer) = (elit_Timeout)) THEN
                state1.dvar_M_sup_Timer := elit_Off;
            END_IF;
            IF ((state0.dvar_M_Timer1) = (elit_Running)) THEN
                state1.cvar_M_Timer1_t := 0.0;
                state1.dvar_M_Timer1 := elit_Off;
            ELSIF ((state0.dvar_M_Timer1) = (elit_Timeout)) THEN
                state1.cvar_M_Timer1_t := 0.0;
                state1.dvar_M_Timer1 := elit_Off;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "Timer_u_timeout".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_Timer) = (elit_Running);
        b1 := b1 AND ((state0.dvar_M_Timer1) = (elit_Running));
        b1 := b1 AND ((state0.cvar_M_Timer1_t) &gt; (0.5));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_Timer := elit_Timeout;
            state1.dvar_M_Timer1 := elit_Timeout;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "TTimer_c_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_sup) = (elit_X);
        IF b1 THEN
            b3 := (state0.dvar_M_sup_A_elevator_down) = (elit_On);
            b3 := b3 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
            b2 := b3;
            IF NOT(b2) THEN
                b3 := (state0.dvar_M_sup_A_elevator_down) = (elit_Off);
                IF b3 THEN
                    b4 := (state0.dvar_M_sup_PusherLift) = (elit_Two);
                    b4 := b4 OR ((state0.dvar_M_sup_PusherLift) = (elit_Four));
                    b3 := b3 AND (b4);
                END_IF;
                b3 := b3 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
                b2 := b2 OR (b3);
            END_IF;
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_TTimer) = (elit_Off));
        b1 := b1 AND ((state0.dvar_M_TTimer1) = (elit_Off));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_TTimer := elit_Running;
            state1.dvar_M_TTimer1 := elit_Running;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "TTimer_c_reset".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_sup) = (elit_X);
        b1 := b1 AND ((state0.dvar_M_sup_A_elevator_down) = (elit_Off));
        IF b1 THEN
            b2 := (state0.dvar_M_sup_PusherLift) = (elit_One);
            b2 := b2 OR ((state0.dvar_M_sup_PusherLift) = (elit_Three));
            b1 := b1 AND (b2);
        END_IF;
        b1 := b1 AND ((state0.dvar_M_sup_S_Tinitialized) = (elit_On));
        IF b1 THEN
            b2 := (state0.dvar_M_sup_TTimer) = (elit_Running);
            b2 := b2 OR ((state0.dvar_M_sup_TTimer) = (elit_Timeout));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            b2 := (state0.dvar_M_TTimer1) = (elit_Running);
            b2 := b2 OR ((state0.dvar_M_TTimer1) = (elit_Timeout));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_sup_TTimer) = (elit_Running)) THEN
                state1.dvar_M_sup_TTimer := elit_Off;
            ELSIF ((state0.dvar_M_sup_TTimer) = (elit_Timeout)) THEN
                state1.dvar_M_sup_TTimer := elit_Off;
            END_IF;
            IF ((state0.dvar_M_TTimer1) = (elit_Running)) THEN
                state1.cvar_M_TTimer1_t := 0.0;
                state1.dvar_M_TTimer1 := elit_Off;
            ELSIF ((state0.dvar_M_TTimer1) = (elit_Timeout)) THEN
                state1.cvar_M_TTimer1_t := 0.0;
                state1.dvar_M_TTimer1 := elit_Off;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "TTimer_u_timeout".
    IF NOT progress THEN
        b1 := (state0.dvar_M_sup_TTimer) = (elit_Running);
        b1 := b1 AND ((state0.dvar_M_TTimer1) = (elit_Running));
        b1 := b1 AND ((state0.cvar_M_TTimer1_t) &gt; (0.5));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_sup_TTimer := elit_Timeout;
            state1.dvar_M_TTimer1 := elit_Timeout;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init0);
        b1 := b1 AND ((state0.cvar_M_HardwareMapDH_t) &gt;= (2.0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH := elit_init1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapDH) = (elit_init1) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_x2testing := FALSE;
            state1.dvar_M_HardwareMapDH := elit_init2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init2);
        IF b1 THEN
            b2 := ivar_s_xpos_at1;
            b2 := b2 OR (ivar_s_xpos_at2);
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_x2testing := TRUE;
            state1.dvar_M_HardwareMapDH := elit_init3;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapDH) = (elit_init3) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_transfer2pickpos := TRUE;
            state1.dvar_M_HardwareMapDH := elit_init4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init4);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_transfer2pickpos := FALSE;
            state1.dvar_M_HardwareMapDH := elit_init5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapDH) = (elit_init5) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_transfer2droppos := TRUE;
            state1.dvar_M_HardwareMapDH := elit_init6;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init6);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_transfer2droppos := FALSE;
            state1.dvar_M_HardwareMapDH := elit_init7;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapDH) = (elit_init7) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_x2distributing := FALSE;
            state1.dvar_M_HardwareMapDH := elit_init8;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init8);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_x2distributing := TRUE;
            state1.cvar_M_HardwareMapDH_t := 0.0;
            state1.dvar_M_HardwareMapDH := elit_init9;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init9);
        b1 := b1 AND ((state0.cvar_M_HardwareMapDH_t) &gt;= (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH := elit_init_sensor_check;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 0;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 1;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 2;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 3;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 4;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 5;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 6;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 7;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher1_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 8;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher1_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 9;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack1filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 10;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 11;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher2_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 12;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher2_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 13;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack2filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 14;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 15;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher3_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 16;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher3_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 17;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack3filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 18;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 19;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 22;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Hstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 23;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 24;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 25;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 26;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 27;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 28;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 29;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 33;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 34;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 35;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_xpos_atdrop));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 36;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_zpos_atup));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 37;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_zpos_atdown);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 38;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_gripper);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 39;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 40;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_transfer_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 41;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_transfer_athalfway));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 42;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_vacuum);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 43;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_init_err_sen_idx := 44;
            state1.dvar_M_HardwareMapDH := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Dstartbutton));
        b1 := b1 AND (ivar_s_Dstopbutton);
        b1 := b1 AND (NOT(ivar_s_Dautoswitch));
        b1 := b1 AND (NOT(ivar_s_Dresetbutton));
        b1 := b1 AND (NOT(ivar_s_Din4));
        b1 := b1 AND (NOT(ivar_s_Din5));
        b1 := b1 AND (NOT(ivar_s_Din6));
        b1 := b1 AND (NOT(ivar_s_Din7));
        b1 := b1 AND (ivar_s_pusher1_in);
        b1 := b1 AND (NOT(ivar_s_pusher1_out));
        b1 := b1 AND (ivar_s_stack1filled);
        b1 := b1 AND (NOT(ivar_s_product1));
        b1 := b1 AND (ivar_s_pusher2_in);
        b1 := b1 AND (NOT(ivar_s_pusher2_out));
        b1 := b1 AND (ivar_s_stack2filled);
        b1 := b1 AND (NOT(ivar_s_product2));
        b1 := b1 AND (ivar_s_pusher3_in);
        b1 := b1 AND (NOT(ivar_s_pusher3_out));
        b1 := b1 AND (ivar_s_stack3filled);
        b1 := b1 AND (NOT(ivar_s_product3));
        b1 := b1 AND (NOT(ivar_s_Hstartbutton));
        b1 := b1 AND (ivar_s_Hstopbutton);
        b1 := b1 AND (NOT(ivar_s_Hautoswitch));
        b1 := b1 AND (NOT(ivar_s_Hresetbutton));
        b1 := b1 AND (NOT(ivar_s_Hin4));
        b1 := b1 AND (NOT(ivar_s_Hin5));
        b1 := b1 AND (NOT(ivar_s_Hin6));
        b1 := b1 AND (NOT(ivar_s_Hin7));
        b1 := b1 AND (NOT(ivar_s_xpos_at1));
        b1 := b1 AND (NOT(ivar_s_xpos_at2));
        b1 := b1 AND (NOT(ivar_s_xpos_at3));
        b1 := b1 AND (ivar_s_xpos_atdrop);
        b1 := b1 AND (ivar_s_zpos_atup);
        b1 := b1 AND (NOT(ivar_s_zpos_atdown));
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND (NOT(ivar_s_transfer_atpickup));
        b1 := b1 AND (NOT(ivar_s_transfer_atdrop));
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        b1 := b1 AND (NOT(ivar_s_product4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH := elit_init_ok;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMapDH_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_init_err_led_idx) = (0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMapDH_t := 0.0;
            state1.dvar_M_HardwareMapDH_init_err_led_idx := 1;
            state1.dvar_M_HardwareMapDH_out_a_DledQ1 := TRUE;
            state1.dvar_M_HardwareMapDH_out_a_DledQ2 := FALSE;
            state1.dvar_M_HardwareMapDH_out_a_HledQ1 := TRUE;
            state1.dvar_M_HardwareMapDH_out_a_HledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMapDH_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_init_err_led_idx) = (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMapDH_t := 0.0;
            state1.dvar_M_HardwareMapDH_init_err_led_idx := 0;
            state1.dvar_M_HardwareMapDH_out_a_DledQ1 := FALSE;
            state1.dvar_M_HardwareMapDH_out_a_DledQ2 := TRUE;
            state1.dvar_M_HardwareMapDH_out_a_HledQ1 := FALSE;
            state1.dvar_M_HardwareMapDH_out_a_HledQ2 := TRUE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapDH) = (elit_init_ok) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_DledQ1 := FALSE;
            state1.dvar_M_HardwareMapDH_out_a_DledQ2 := FALSE;
            state1.dvar_M_HardwareMapDH_out_a_HledQ1 := FALSE;
            state1.dvar_M_HardwareMapDH_out_a_HledQ2 := FALSE;
            state1.dvar_M_HardwareMapDH := elit_initialized;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Dstartled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Dstartled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Dresetled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Dresetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_DledQ1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_DledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_DledQ2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_DledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Dout4) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Dout4 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Dout5) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Dout5 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Dout6) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Dout6 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Dout7) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Dout7 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_pusher1) &lt;&gt; ((state0.dvar_M_sup_A_pusher1) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_pusher1 := (state0.dvar_M_sup_A_pusher1) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_pusher2) &lt;&gt; ((state0.dvar_M_sup_A_pusher2) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_pusher2 := (state0.dvar_M_sup_A_pusher2) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_pusher3) &lt;&gt; ((state0.dvar_M_sup_A_pusher3) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_pusher3 := (state0.dvar_M_sup_A_pusher3) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Hstartled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Hstartled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Hresetled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Hresetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_HledQ1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_HledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_HledQ2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_HledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Hout4) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Hout4 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Hout5) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Hout5 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Hout6) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Hout6 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_Hout7) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_Hout7 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_x2distributing) &lt;&gt; ((state0.dvar_M_sup_A_x2distributing) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_x2distributing := (state0.dvar_M_sup_A_x2distributing) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_x2testing) &lt;&gt; ((state0.dvar_M_sup_A_x2testing) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_x2testing := (state0.dvar_M_sup_A_x2testing) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_zdown) &lt;&gt; ((state0.dvar_M_sup_A_zdown) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_zdown := (state0.dvar_M_sup_A_zdown) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_gripperclose) &lt;&gt; ((state0.dvar_M_sup_A_gripperclose) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_gripperclose := (state0.dvar_M_sup_A_gripperclose) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_transfer2pickpos) &lt;&gt; ((state0.dvar_M_sup_A_transfer2pickpos) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_transfer2pickpos := (state0.dvar_M_sup_A_transfer2pickpos) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_transfer2droppos) &lt;&gt; ((state0.dvar_M_sup_A_transfer2droppos) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_transfer2droppos := (state0.dvar_M_sup_A_transfer2droppos) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_vacuum) &lt;&gt; ((state0.dvar_M_sup_A_vacuum) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_vacuum := (state0.dvar_M_sup_A_vacuum) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_ejectpulse) &lt;&gt; ((state0.dvar_M_sup_A_ejectpulse) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_ejectpulse := (state0.dvar_M_sup_A_ejectpulse) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapDH) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapDH_out_a_handlingready) &lt;&gt; ((state0.dvar_M_sup_A_handlingready) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapDH_out_a_handlingready := (state0.dvar_M_sup_A_handlingready) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init0);
        b1 := b1 AND ((state0.cvar_M_HardwareMapP_t) &gt;= (2.0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP := elit_init1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapP) = (elit_init1) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_turntable := TRUE;
            state1.dvar_M_HardwareMapP := elit_init2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init2);
        b1 := b1 AND (NOT(ivar_s_turntable));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP := elit_init3;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init3);
        b1 := b1 AND (ivar_s_turntable);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_turntable := FALSE;
            state1.cvar_M_HardwareMapP_t := 0.0;
            state1.dvar_M_HardwareMapP := elit_init4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init4);
        b1 := b1 AND ((state0.cvar_M_HardwareMapP_t) &gt;= (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP := elit_init_sensor_check;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Pstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 0;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Pstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 1;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Pautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 2;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Presetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 3;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Pin4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 4;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Pin5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 5;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Pin6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 6;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Pin7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 7;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_atinput);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 8;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_attest);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 9;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_atdrill);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 10;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_atexit);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 11;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_atspare);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 12;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_clamp);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 13;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_test_ok);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 14;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_drill_up));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 15;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_drill_down);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 16;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_turntable));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_init_err_sen_idx := 17;
            state1.dvar_M_HardwareMapP := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Pstartbutton));
        b1 := b1 AND (ivar_s_Pstopbutton);
        b1 := b1 AND (NOT(ivar_s_Pautoswitch));
        b1 := b1 AND (NOT(ivar_s_Presetbutton));
        b1 := b1 AND (NOT(ivar_s_Pin4));
        b1 := b1 AND (NOT(ivar_s_Pin5));
        b1 := b1 AND (NOT(ivar_s_Pin6));
        b1 := b1 AND (NOT(ivar_s_Pin7));
        b1 := b1 AND (NOT(ivar_s_atinput));
        b1 := b1 AND (NOT(ivar_s_attest));
        b1 := b1 AND (NOT(ivar_s_atdrill));
        b1 := b1 AND (NOT(ivar_s_atexit));
        b1 := b1 AND (NOT(ivar_s_atspare));
        b1 := b1 AND (NOT(ivar_s_clamp));
        b1 := b1 AND (NOT(ivar_s_test_ok));
        b1 := b1 AND (ivar_s_drill_up);
        b1 := b1 AND (NOT(ivar_s_drill_down));
        b1 := b1 AND (ivar_s_turntable);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP := elit_init_ok;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMapP_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_init_err_led_idx) = (0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMapP_t := 0.0;
            state1.dvar_M_HardwareMapP_init_err_led_idx := 1;
            state1.dvar_M_HardwareMapP_out_a_PledQ1 := TRUE;
            state1.dvar_M_HardwareMapP_out_a_PledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMapP_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_init_err_led_idx) = (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMapP_t := 0.0;
            state1.dvar_M_HardwareMapP_init_err_led_idx := 0;
            state1.dvar_M_HardwareMapP_out_a_PledQ1 := FALSE;
            state1.dvar_M_HardwareMapP_out_a_PledQ2 := TRUE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapP) = (elit_init_ok) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_PledQ1 := FALSE;
            state1.dvar_M_HardwareMapP_out_a_PledQ2 := FALSE;
            state1.dvar_M_HardwareMapP := elit_initialized;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_Pstartled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_Pstartled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_Presetled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_Presetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_PledQ1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_PledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_PledQ2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_PledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_Pout4) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_Pout4 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_Pout5) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_Pout5 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_Pout6) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_Pout6 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_Pout7) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_Pout7 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_drill) &lt;&gt; ((state0.dvar_M_sup_A_drill) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_drill := (state0.dvar_M_sup_A_drill) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_turntable) &lt;&gt; ((state0.dvar_M_sup_A_turntable) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_turntable := (state0.dvar_M_sup_A_turntable) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_drilldown) &lt;&gt; ((state0.dvar_M_sup_A_drilldown) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_drilldown := (state0.dvar_M_sup_A_drilldown) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_drillup) &lt;&gt; ((state0.dvar_M_sup_A_drillup) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_drillup := (state0.dvar_M_sup_A_drillup) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_clamp) &lt;&gt; ((state0.dvar_M_sup_A_clamp) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_clamp := (state0.dvar_M_sup_A_clamp) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_tester) &lt;&gt; ((state0.dvar_M_sup_A_tester) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_tester := (state0.dvar_M_sup_A_tester) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_eject) &lt;&gt; ((state0.dvar_M_sup_A_eject) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_eject := (state0.dvar_M_sup_A_eject) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapP) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapP_out_a_processingready) &lt;&gt; ((state0.dvar_M_sup_A_processingready) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapP_out_a_processingready := (state0.dvar_M_sup_A_processingready) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init0);
        b1 := b1 AND ((state0.cvar_M_HardwareMapS_t) &gt;= (2.0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS := elit_init1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapS) = (elit_init1) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_stopperretract := TRUE;
            state1.dvar_M_HardwareMapS_out_a_conveyer := TRUE;
            state1.cvar_M_HardwareMapS_t := 0.0;
            state1.dvar_M_HardwareMapS := elit_init2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init2);
        b1 := b1 AND ((state0.cvar_M_HardwareMapS_t) &gt;= (5));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_stopperretract := FALSE;
            state1.dvar_M_HardwareMapS_out_a_conveyer := FALSE;
            state1.dvar_M_HardwareMapS := elit_init_sensor_check;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Sstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 0;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Sstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 1;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Sautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 2;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Sresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 3;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Sin4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 4;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Sin5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 5;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Sin6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 6;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Sin7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 7;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 8;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_inductive);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 9;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_optical);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 10;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_slidefull);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 11;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_gate1_opened));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 12;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_gate1_closed);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 13;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_gate2_opened));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 14;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_gate2_closed);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_init_err_sen_idx := 15;
            state1.dvar_M_HardwareMapS := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Sstartbutton));
        b1 := b1 AND (ivar_s_Sstopbutton);
        b1 := b1 AND (NOT(ivar_s_Sautoswitch));
        b1 := b1 AND (NOT(ivar_s_Sresetbutton));
        b1 := b1 AND (NOT(ivar_s_Sin4));
        b1 := b1 AND (NOT(ivar_s_Sin5));
        b1 := b1 AND (NOT(ivar_s_Sin6));
        b1 := b1 AND (NOT(ivar_s_Sin7));
        b1 := b1 AND (NOT(ivar_s_product));
        b1 := b1 AND (NOT(ivar_s_inductive));
        b1 := b1 AND (NOT(ivar_s_optical));
        b1 := b1 AND (NOT(ivar_s_slidefull));
        b1 := b1 AND (ivar_s_gate1_opened);
        b1 := b1 AND (NOT(ivar_s_gate1_closed));
        b1 := b1 AND (ivar_s_gate2_opened);
        b1 := b1 AND (NOT(ivar_s_gate2_closed));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS := elit_init_ok;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMapS_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_init_err_led_idx) = (0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMapS_t := 0.0;
            state1.dvar_M_HardwareMapS_init_err_led_idx := 1;
            state1.dvar_M_HardwareMapS_out_a_SledQ1 := TRUE;
            state1.dvar_M_HardwareMapS_out_a_SledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMapS_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_init_err_led_idx) = (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMapS_t := 0.0;
            state1.dvar_M_HardwareMapS_init_err_led_idx := 0;
            state1.dvar_M_HardwareMapS_out_a_SledQ1 := FALSE;
            state1.dvar_M_HardwareMapS_out_a_SledQ2 := TRUE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapS) = (elit_init_ok) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_SledQ1 := FALSE;
            state1.dvar_M_HardwareMapS_out_a_SledQ2 := FALSE;
            state1.dvar_M_HardwareMapS := elit_initialized;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_Sstartled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_Sstartled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_Sresetled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_Sresetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_SledQ1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_SledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_SledQ2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_SledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_Sout4) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_Sout4 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_Sout5) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_Sout5 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_Sout6) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_Sout6 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_Sout7) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_Sout7 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_conveyer) &lt;&gt; ((state0.dvar_M_sup_A_conveyer) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_conveyer := (state0.dvar_M_sup_A_conveyer) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_gate1) &lt;&gt; ((state0.dvar_M_sup_A_gate1) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_gate1 := (state0.dvar_M_sup_A_gate1) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_gate2) &lt;&gt; ((state0.dvar_M_sup_A_gate2) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_gate2 := (state0.dvar_M_sup_A_gate2) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_stopperretract) &lt;&gt; ((state0.dvar_M_sup_A_stopperretract) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_stopperretract := (state0.dvar_M_sup_A_stopperretract) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapS) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapS_out_a_sortingready) &lt;&gt; ((state0.dvar_M_sup_A_sortingready) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapS_out_a_sortingready := (state0.dvar_M_sup_A_sortingready) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init0);
        b1 := b1 AND ((state0.cvar_M_HardwareMapTB_t) &gt;= (2.0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB := elit_init1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapTB) = (elit_init1) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_airslide := TRUE;
            state1.dvar_M_HardwareMapTB_out_a_conveyerB := TRUE;
            state1.cvar_M_HardwareMapTB_t := 0.0;
            state1.dvar_M_HardwareMapTB := elit_init2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init2);
        b1 := b1 AND ((state0.cvar_M_HardwareMapTB_t) &gt;= (5));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_airslide := FALSE;
            state1.dvar_M_HardwareMapTB_out_a_conveyerB := FALSE;
            state1.dvar_M_HardwareMapTB := elit_init_sensor_check;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Tstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 0;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Tstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 1;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Tautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 2;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Tresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 3;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Tin4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 4;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Tin5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 5;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Tin6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 6;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Tin7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 7;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_elevator_up);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 8;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_elevator_down));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 9;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 10;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_opticalT);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 11;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_capacitive);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 12;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_reflective);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 13;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_productheight);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 14;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Bstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 17;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Bstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 18;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Bautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 19;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Bresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 20;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Bin4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 21;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Bin5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 22;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Bin6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 23;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Bin7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 24;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_atin);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 25;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_atseparator);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 26;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_atend);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 27;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_separator_opened);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 28;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_separator_closed));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_init_err_sen_idx := 29;
            state1.dvar_M_HardwareMapTB := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Tstartbutton));
        b1 := b1 AND (ivar_s_Tstopbutton);
        b1 := b1 AND (NOT(ivar_s_Tautoswitch));
        b1 := b1 AND (NOT(ivar_s_Tresetbutton));
        b1 := b1 AND (NOT(ivar_s_Tin4));
        b1 := b1 AND (NOT(ivar_s_Tin5));
        b1 := b1 AND (NOT(ivar_s_Tin6));
        b1 := b1 AND (NOT(ivar_s_Tin7));
        b1 := b1 AND (NOT(ivar_s_elevator_up));
        b1 := b1 AND (ivar_s_elevator_down);
        b1 := b1 AND (NOT(ivar_s_pusher));
        b1 := b1 AND (NOT(ivar_s_opticalT));
        b1 := b1 AND (NOT(ivar_s_capacitive));
        b1 := b1 AND (NOT(ivar_s_reflective));
        b1 := b1 AND (NOT(ivar_s_productheight));
        b1 := b1 AND (NOT(ivar_s_Bstartbutton));
        b1 := b1 AND (ivar_s_Bstopbutton);
        b1 := b1 AND (NOT(ivar_s_Bautoswitch));
        b1 := b1 AND (NOT(ivar_s_Bresetbutton));
        b1 := b1 AND (NOT(ivar_s_Bin4));
        b1 := b1 AND (NOT(ivar_s_Bin5));
        b1 := b1 AND (NOT(ivar_s_Bin6));
        b1 := b1 AND (NOT(ivar_s_Bin7));
        b1 := b1 AND (NOT(ivar_s_atin));
        b1 := b1 AND (NOT(ivar_s_atseparator));
        b1 := b1 AND (NOT(ivar_s_atend));
        b1 := b1 AND (NOT(ivar_s_separator_opened));
        b1 := b1 AND (ivar_s_separator_closed);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB := elit_init_ok;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMapTB_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_init_err_led_idx) = (0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMapTB_t := 0.0;
            state1.dvar_M_HardwareMapTB_init_err_led_idx := 1;
            state1.dvar_M_HardwareMapTB_out_a_TledQ1 := TRUE;
            state1.dvar_M_HardwareMapTB_out_a_TledQ2 := FALSE;
            state1.dvar_M_HardwareMapTB_out_a_BledQ1 := TRUE;
            state1.dvar_M_HardwareMapTB_out_a_BledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMapTB_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_init_err_led_idx) = (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMapTB_t := 0.0;
            state1.dvar_M_HardwareMapTB_init_err_led_idx := 0;
            state1.dvar_M_HardwareMapTB_out_a_TledQ1 := FALSE;
            state1.dvar_M_HardwareMapTB_out_a_TledQ2 := TRUE;
            state1.dvar_M_HardwareMapTB_out_a_BledQ1 := FALSE;
            state1.dvar_M_HardwareMapTB_out_a_BledQ2 := TRUE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMapTB) = (elit_init_ok) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_TledQ1 := FALSE;
            state1.dvar_M_HardwareMapTB_out_a_TledQ2 := FALSE;
            state1.dvar_M_HardwareMapTB_out_a_BledQ1 := FALSE;
            state1.dvar_M_HardwareMapTB_out_a_BledQ2 := FALSE;
            state1.dvar_M_HardwareMapTB := elit_initialized;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Tstartled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Tstartled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Tresetled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Tresetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_TledQ1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_TledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_TledQ2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_TledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Tout4) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Tout4 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Tout5) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Tout5 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Tout6) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Tout6 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Tout7) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Tout7 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_elevator_up) &lt;&gt; ((state0.dvar_M_sup_A_elevator_up) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_elevator_up := (state0.dvar_M_sup_A_elevator_up) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_elevator_down) &lt;&gt; ((state0.dvar_M_sup_A_elevator_down) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_elevator_down := (state0.dvar_M_sup_A_elevator_down) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_pusher) &lt;&gt; ((state0.dvar_M_sup_A_pusher) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_pusher := (state0.dvar_M_sup_A_pusher) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_airslide) &lt;&gt; ((state0.dvar_M_sup_A_airslide) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_airslide := (state0.dvar_M_sup_A_airslide) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_testingready) &lt;&gt; ((state0.dvar_M_sup_A_testingready) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_testingready := (state0.dvar_M_sup_A_testingready) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Bstartled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Bstartled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Bresetled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Bresetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_BledQ1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_BledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_BledQ2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_BledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Bout4) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Bout4 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Bout5) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Bout5 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Bout6) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Bout6 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_Bout7) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_Bout7 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_separator) &lt;&gt; ((state0.dvar_M_sup_A_separator) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_separator := (state0.dvar_M_sup_A_separator) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_conveyerB) &lt;&gt; ((state0.dvar_M_sup_A_conveyerB) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_conveyerB := (state0.dvar_M_sup_A_conveyerB) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMapTB) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMapTB_out_a_bufferingready) &lt;&gt; ((state0.dvar_M_sup_A_bufferingready) = (elit_On)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMapTB_out_a_bufferingready := (state0.dvar_M_sup_A_bufferingready) = (elit_On);

            state0 := state1;
        END_IF;
    END_IF;

    // Done with events?
    IF NOT progress THEN
        EXIT;
    END_IF;

    // Protect against events that are always enabled.
    loopCount := loopCount + 1;
    IF loopCount &gt;= 100 THEN
        loopsKilled := loopsKilled + 1;
        EXIT;
    END_IF;
END_WHILE;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Untitled1">
        <resource name="Untitled1">
          <task interval="t#10ms" name="PlcTask" priority="20">
            <pouInstance name="MAIN" typeName="MAIN"/>
          </task>
          <globalVars constant="false" name="INPUTS">
            <variable address="%I*" name="ivar_s_Dstartbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Dstopbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Dresetbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Dautoswitch">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Din4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Din5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Din6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Din7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher1_in">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher1_out">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_stack1filled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher2_in">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher2_out">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_stack2filled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher3_in">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher3_out">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_stack3filled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_handlingbusy">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hstartbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hstopbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hresetbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hautoswitch">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hin4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hin5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hin6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hin7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_xpos_at1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_xpos_at2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_xpos_at3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_xpos_atdrop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_zpos_atup">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_zpos_atdown">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_gripper">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_transfer_atpickup">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_transfer_atdrop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_transfer_athalfway">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_vacuum">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_testingbusy">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Tstartbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Tstopbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Tautoswitch">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Tresetbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Tin4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Tin5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Tin6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Tin7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_elevator_up">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_elevator_down">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_opticalT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_capacitive">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_reflective">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_productheight">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_bufferingbusy">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Bstartbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Bstopbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Bautoswitch">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Bresetbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Bin4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Bin5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Bin6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Bin7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_atin">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_atseparator">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_atend">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_separator_opened">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_separator_closed">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_processingbusy">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Pstartbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Pstopbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Pautoswitch">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Presetbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Pin4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Pin5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Pin6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Pin7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_atinput">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_attest">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_atdrill">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_atexit">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_atspare">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_clamp">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_test_ok">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_drill_up">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_drill_down">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_turntable">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_sortingbusy">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Sstartbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Sstopbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Sautoswitch">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Sresetbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Sin4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Sin5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Sin6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Sin7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_inductive">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_optical">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_slidefull">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_gate1_opened">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_gate1_closed">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_gate2_opened">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_gate2_closed">
              <type>
                <BOOL/>
              </type>
            </variable>
          </globalVars>
          <globalVars constant="false" name="TIMERS">
            <variable name="timer0">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="timer1">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="curTimer">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
